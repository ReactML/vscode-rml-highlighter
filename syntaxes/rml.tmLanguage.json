{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "React Markup Language",
	"patterns": [
		{
      "include": "#xml-processing"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#tags-valid"
    },
    {
      "include": "#tags-invalid"
    },
    {
      "include": "#entities"
    },
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
      "include": "#directives"
    },
    {
      "include": "#statements"
    },
    {
      "include": "#shebang"
		},
		{
			"include": "#comment-jsx"
		}
	],
	"repository": {
		"attribute": {
      "patterns": [
        {
          "begin": "(s(hape|cope|t(ep|art)|ize(s)?|p(ellcheck|an)|elected|lot|andbox|rc(set|doc|lang)?)|h(ttp-equiv|i(dden|gh)|e(ight|aders)|ref(lang)?)|n(o(nce|validate|module)|ame)|c(h(ecked|arset)|ite|o(nt(ent(editable)?|rols)|ords|l(s(pan)?|or))|lass|rossorigin)|t(ype(mustmatch)?|itle|a(rget|bindex)|ranslate)|i(s(map)?|n(tegrity|putmode)|tem(scope|type|id|prop|ref)|d)|op(timum|en)|d(i(sabled|r(name)?)|ownload|e(coding|f(er|ault))|at(etime|a)|raggable)|usemap|p(ing|oster|la(ysinline|ceholder)|attern|reload)|enctype|value|kind|for(m(novalidate|target|enctype|action|method)?)?|w(idth|rap)|l(ist|o(op|w)|a(ng|bel))|a(s(ync)?|c(ce(sskey|pt(-charset)?)|tion)|uto(c(omplete|apitalize)|play|focus)|l(t|low(usermedia|paymentrequest|fullscreen))|bbr)|r(ows(pan)?|e(versed|quired|ferrerpolicy|l|adonly))|m(in(length)?|u(ted|ltiple)|e(thod|dia)|a(nifest|x(length)?)))(?![\\w:-])",
          "beginCaptures": {
            "0": {
              "name": "entity.other.attribute-name.html"
            }
          },
          "comment": "HTML5 attributes, not event handlers",
          "end": "(?=\\s*+[^=\\s])",
          "name": "meta.attribute.$1.html",
          "patterns": [
            {
              "include": "#attribute-interior"
            }
          ]
        },
        {
          "begin": "style(?![\\w:-])",
          "beginCaptures": {
            "0": {
              "name": "entity.other.attribute-name.html"
            }
          },
          "comment": "HTML5 style attribute",
          "end": "(?=\\s*+[^=\\s])",
          "name": "meta.attribute.style.html",
          "patterns": [
            {
              "begin": "=",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.separator.key-value.html"
                }
              },
              "end": "(?<=[^\\s=])(?!\\s*=)|(?=/?>)",
              "patterns": [
                {
                  "begin": "(?=[^\\s=<>`/]|/(?!>))",
                  "end": "(?!\\G)",
                  "name": "meta.embedded.line.css",
                  "patterns": [
                    {
                      "captures": {
                        "0": {
                          "name": "source.css"
                        }
                      },
                      "match": "([^\\s\"'=<>`/]|/(?!>))+",
                      "name": "string.unquoted.html"
                    },
                    {
                      "begin": "\"",
                      "beginCaptures": {
                        "0": {
                          "name": "punctuation.definition.string.begin.html"
                        }
                      },
                      "contentName": "source.css",
                      "end": "(\")",
                      "endCaptures": {
                        "0": {
                          "name": "punctuation.definition.string.end.html"
                        },
                        "1": {
                          "name": "source.css-ignored-vscode"
                        }
                      },
                      "name": "string.quoted.double.html",
                      "patterns": [
                        {
                          "include": "#entities"
                        }
                      ]
                    },
                    {
                      "begin": "'",
                      "beginCaptures": {
                        "0": {
                          "name": "punctuation.definition.string.begin.html"
                        }
                      },
                      "contentName": "source.css",
                      "end": "(')",
                      "endCaptures": {
                        "0": {
                          "name": "punctuation.definition.string.end.html"
                        },
                        "1": {
                          "name": "source.css-ignored-vscode"
                        }
                      },
                      "name": "string.quoted.single.html",
                      "patterns": [
                        {
                          "include": "#entities"
                        }
                      ]
                    }
                  ]
                },
                {
                  "match": "=",
                  "name": "invalid.illegal.unexpected-equals-sign.html"
                }
              ]
            }
          ]
        },
        {
          "begin": "on(s(croll|t(orage|alled)|u(spend|bmit)|e(curitypolicyviolation|ek(ing|ed)|lect))|hashchange|c(hange|o(ntextmenu|py)|u(t|echange)|l(ick|ose)|an(cel|play(through)?))|t(imeupdate|oggle)|in(put|valid)|o(nline|ffline)|d(urationchange|r(op|ag(start|over|e(n(ter|d)|xit)|leave)?)|blclick)|un(handledrejection|load)|p(opstate|lay(ing)?|a(ste|use|ge(show|hide))|rogress)|e(nded|rror|mptied)|volumechange|key(down|up|press)|focus|w(heel|aiting)|l(oad(start|e(nd|d(data|metadata)))?|anguagechange)|a(uxclick|fterprint|bort)|r(e(s(ize|et)|jectionhandled)|atechange)|m(ouse(o(ut|ver)|down|up|enter|leave|move)|essage(error)?)|b(efore(unload|print)|lur))(?![\\w:-])",
          "beginCaptures": {
            "0": {
              "name": "entity.other.attribute-name.html"
            }
          },
          "comment": "HTML5 attributes, event handlers",
          "end": "(?=\\s*+[^=\\s])",
          "name": "meta.attribute.event-handler.$1.html",
          "patterns": [
            {
              "begin": "=",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.separator.key-value.html"
                }
              },
              "end": "(?<=[^\\s=])(?!\\s*=)|(?=/?>)",
              "patterns": [
                {
                  "begin": "(?=[^\\s=<>`/]|/(?!>))",
                  "end": "(?!\\G)",
                  "name": "meta.embedded.line.js",
                  "patterns": [
                    {
                      "captures": {
                        "0": {
                          "name": "source.js"
                        },
                        "1": {
                          "patterns": [
                            {
                              "include": "source.js"
                            }
                          ]
                        }
                      },
                      "match": "(([^\\s\"'=<>`/]|/(?!>))+)",
                      "name": "string.unquoted.html"
                    },
                    {
                      "begin": "\"",
                      "beginCaptures": {
                        "0": {
                          "name": "punctuation.definition.string.begin.html"
                        }
                      },
                      "contentName": "source.js",
                      "end": "(\")",
                      "endCaptures": {
                        "0": {
                          "name": "punctuation.definition.string.end.html"
                        },
                        "1": {
                          "name": "source.js-ignored-vscode"
                        }
                      },
                      "name": "string.quoted.double.html",
                      "patterns": [
                        {
                          "captures": {
                            "0": {
                              "patterns": [
                                {
                                  "include": "source.js"
                                }
                              ]
                            }
                          },
                          "match": "([^\\n\"/]|/(?![/*]))+"
                        },
                        {
                          "begin": "//",
                          "beginCaptures": {
                            "0": {
                              "name": "punctuation.definition.comment.js"
                            }
                          },
                          "end": "(?=\")|\\n",
                          "name": "comment.line.double-slash.js"
                        },
                        {
                          "begin": "/\\*",
                          "beginCaptures": {
                            "0": {
                              "name": "punctuation.definition.comment.begin.js"
                            }
                          },
                          "end": "(?=\")|\\*/",
                          "endCaptures": {
                            "0": {
                              "name": "punctuation.definition.comment.end.js"
                            }
                          },
                          "name": "comment.block.js"
                        }
                      ]
                    },
                    {
                      "begin": "'",
                      "beginCaptures": {
                        "0": {
                          "name": "punctuation.definition.string.begin.html"
                        }
                      },
                      "contentName": "source.js",
                      "end": "(')",
                      "endCaptures": {
                        "0": {
                          "name": "punctuation.definition.string.end.html"
                        },
                        "1": {
                          "name": "source.js-ignored-vscode"
                        }
                      },
                      "name": "string.quoted.single.html",
                      "patterns": [
                        {
                          "captures": {
                            "0": {
                              "patterns": [
                                {
                                  "include": "source.js"
                                }
                              ]
                            }
                          },
                          "match": "([^\\n'/]|/(?![/*]))+"
                        },
                        {
                          "begin": "//",
                          "beginCaptures": {
                            "0": {
                              "name": "punctuation.definition.comment.js"
                            }
                          },
                          "end": "(?=')|\\n",
                          "name": "comment.line.double-slash.js"
                        },
                        {
                          "begin": "/\\*",
                          "beginCaptures": {
                            "0": {
                              "name": "punctuation.definition.comment.begin.js"
                            }
                          },
                          "end": "(?=')|\\*/",
                          "endCaptures": {
                            "0": {
                              "name": "punctuation.definition.comment.end.js"
                            }
                          },
                          "name": "comment.block.js"
                        }
                      ]
                    }
                  ]
                },
                {
                  "match": "=",
                  "name": "invalid.illegal.unexpected-equals-sign.html"
                }
              ]
            }
          ]
        },
        {
          "begin": "(data-[a-z\\-]+)(?![\\w:-])",
          "beginCaptures": {
            "0": {
              "name": "entity.other.attribute-name.html"
            }
          },
          "comment": "HTML5 attributes, data-*",
          "end": "(?=\\s*+[^=\\s])",
          "name": "meta.attribute.data-x.$1.html",
          "patterns": [
            {
              "include": "#attribute-interior"
            }
          ]
        },
        {
          "begin": "(align|bgcolor|border)(?![\\w:-])",
          "beginCaptures": {
            "0": {
              "name": "invalid.deprecated.entity.other.attribute-name.html"
            }
          },
          "comment": "HTML attributes, deprecated",
          "end": "(?=\\s*+[^=\\s])",
          "name": "meta.attribute.$1.html",
          "patterns": [
            {
              "include": "#attribute-interior"
            }
          ]
        },
        {
          "begin": "([^\\x{0020}\"'<>/=\\x{0000}-\\x{001F}\\x{007F}-\\x{009F}\\x{FDD0}-\\x{FDEF}\\x{FFFE}\\x{FFFF}\\x{1FFFE}\\x{1FFFF}\\x{2FFFE}\\x{2FFFF}\\x{3FFFE}\\x{3FFFF}\\x{4FFFE}\\x{4FFFF}\\x{5FFFE}\\x{5FFFF}\\x{6FFFE}\\x{6FFFF}\\x{7FFFE}\\x{7FFFF}\\x{8FFFE}\\x{8FFFF}\\x{9FFFE}\\x{9FFFF}\\x{AFFFE}\\x{AFFFF}\\x{BFFFE}\\x{BFFFF}\\x{CFFFE}\\x{CFFFF}\\x{DFFFE}\\x{DFFFF}\\x{EFFFE}\\x{EFFFF}\\x{FFFFE}\\x{FFFFF}\\x{10FFFE}\\x{10FFFF}]+)",
          "beginCaptures": {
            "0": {
              "name": "entity.other.attribute-name.html"
            }
          },
          "comment": "Anything else that is valid",
          "end": "(?=\\s*+[^=\\s])",
          "name": "meta.attribute.unrecognized.$1.html",
          "patterns": [
            {
              "include": "#attribute-interior"
            }
          ]
        },
        {
          "match": "[^\\s>]+",
          "name": "invalid.illegal.character-not-allowed-here.html"
        }
      ]
    },
    "attribute-interior": {
      "patterns": [
        {
          "begin": "=",
          "beginCaptures": {
            "0": {
              "name": "punctuation.separator.key-value.html"
            }
          },
          "end": "(?<=[^\\s=])(?!\\s*=)|(?=/?>)",
          "patterns": [
            {
              "match": "([^\\s\"'=<>`/]|/(?!>))+",
              "name": "string.unquoted.html"
            },
            {
              "begin": "\"",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.html"
                }
              },
              "end": "\"",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.string.end.html"
                }
              },
              "name": "string.quoted.double.html",
              "patterns": [
                {
                  "include": "#entities"
                }
              ]
            },
            {
              "begin": "'",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.html"
                }
              },
              "end": "'",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.string.end.html"
                }
              },
              "name": "string.quoted.single.html",
              "patterns": [
                {
                  "include": "#entities"
                }
              ]
            },
            {
              "match": "=",
              "name": "invalid.illegal.unexpected-equals-sign.html"
            }
          ]
        }
      ]
    },
    "comment": {
      "begin": "<!--",
      "captures": {
        "0": {
          "name": "punctuation.definition.comment.html"
        }
      },
      "end": "-->",
      "name": "comment.block.html",
      "patterns": [
        {
          "match": "\\G-?>",
          "name": "invalid.illegal.characters-not-allowed-here.html"
        },
        {
          "match": "<!--(?!>)|<!-(?=-->)",
          "name": "invalid.illegal.characters-not-allowed-here.html"
        },
        {
          "match": "--!>",
          "name": "invalid.illegal.characters-not-allowed-here.html"
        }
      ]
    },
    "core-minus-invalid": {
      "comment": "This should be the root pattern array includes minus #tags-invalid",
      "patterns": [
        {
          "include": "#xml-processing"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#tags-valid"
        },
        {
          "include": "#entities"
        }
      ]
    },
    "entities": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.entity.html"
            },
            "912": {
              "name": "punctuation.definition.entity.html"
            }
          },
          "comment": "Yes this is a bit ridiculous, there are quite a lot of these",
          "match": "(?x)\n\t\t\t\t\t\t(&)\t(?=[a-zA-Z])\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\t(a(s(ymp(eq)?|cr|t)|n(d(slope|d|v|and)?|g(s(t|ph)|zarr|e|le|rt(vb(d)?)?|msd(a(h|c|d|e|f|a|g|b))?)?)|c(y|irc|d|ute|E)?|tilde|o(pf|gon)|uml|p(id|os|prox(eq)?|e|E|acir)?|elig|f(r)?|w(conint|int)|l(pha|e(ph|fsym))|acute|ring|grave|m(p|a(cr|lg))|breve)|A(s(sign|cr)|nd|MP|c(y|irc)|tilde|o(pf|gon)|uml|pplyFunction|fr|Elig|lpha|acute|ring|grave|macr|breve))\n\t\t\t\t\t\t  | (B(scr|cy|opf|umpeq|e(cause|ta|rnoullis)|fr|a(ckslash|r(v|wed))|reve)|b(s(cr|im(e)?|ol(hsub|b)?|emi)|n(ot|e(quiv)?)|c(y|ong)|ig(s(tar|qcup)|c(irc|up|ap)|triangle(down|up)|o(times|dot|plus)|uplus|vee|wedge)|o(t(tom)?|pf|wtie|x(h(d|u|D|U)?|times|H(d|u|D|U)?|d(R|l|r|L)|u(R|l|r|L)|plus|D(R|l|r|L)|v(R|h|H|l|r|L)?|U(R|l|r|L)|V(R|h|H|l|r|L)?|minus|box))|Not|dquo|u(ll(et)?|mp(e(q)?|E)?)|prime|e(caus(e)?|t(h|ween|a)|psi|rnou|mptyv)|karow|fr|l(ock|k(1(2|4)|34)|a(nk|ck(square|triangle(down|left|right)?|lozenge)))|a(ck(sim(eq)?|cong|prime|epsilon)|r(vee|wed(ge)?))|r(eve|vbar)|brk(tbrk)?))\n\t\t\t\t\t\t  | (c(s(cr|u(p(e)?|b(e)?))|h(cy|i|eck(mark)?)|ylcty|c(irc|ups(sm)?|edil|a(ps|ron))|tdot|ir(scir|c(eq|le(d(R|circ|S|dash|ast)|arrow(left|right)))?|e|fnint|E|mid)?|o(n(int|g(dot)?)|p(y(sr)?|f|rod)|lon(e(q)?)?|m(p(fn|le(xes|ment))?|ma(t)?))|dot|u(darr(l|r)|p(s|c(up|ap)|or|dot|brcap)?|e(sc|pr)|vee|wed|larr(p)?|r(vearrow(left|right)|ly(eq(succ|prec)|vee|wedge)|arr(m)?|ren))|e(nt(erdot)?|dil|mptyv)|fr|w(conint|int)|lubs(uit)?|a(cute|p(s|c(up|ap)|dot|and|brcup)?|r(on|et))|r(oss|arr))|C(scr|hi|c(irc|onint|edil|aron)|ircle(Minus|Times|Dot|Plus)|Hcy|o(n(tourIntegral|int|gruent)|unterClockwiseContourIntegral|p(f|roduct)|lon(e)?)|dot|up(Cap)?|OPY|e(nterDot|dilla)|fr|lo(seCurly(DoubleQuote|Quote)|ckwiseContourIntegral)|a(yleys|cute|p(italDifferentialD)?)|ross))\n\t\t\t\t\t\t  | (d(s(c(y|r)|trok|ol)|har(l|r)|c(y|aron)|t(dot|ri(f)?)|i(sin|e|v(ide(ontimes)?|onx)?|am(s|ond(suit)?)?|gamma)|Har|z(cy|igrarr)|o(t(square|plus|eq(dot)?|minus)?|ublebarwedge|pf|wn(harpoon(left|right)|downarrows|arrow)|llar)|d(otseq|a(rr|gger))?|u(har|arr)|jcy|e(lta|g|mptyv)|f(isht|r)|wangle|lc(orn|rop)|a(sh(v)?|leth|rr|gger)|r(c(orn|rop)|bkarow)|b(karow|lac)|Arr)|D(s(cr|trok)|c(y|aron)|Scy|i(fferentialD|a(critical(Grave|Tilde|Do(t|ubleAcute)|Acute)|mond))|o(t(Dot|Equal)?|uble(Right(Tee|Arrow)|ContourIntegral|Do(t|wnArrow)|Up(DownArrow|Arrow)|VerticalBar|L(ong(RightArrow|Left(RightArrow|Arrow))|eft(RightArrow|Tee|Arrow)))|pf|wn(Right(TeeVector|Vector(Bar)?)|Breve|Tee(Arrow)?|arrow|Left(RightVector|TeeVector|Vector(Bar)?)|Arrow(Bar|UpArrow)?))|Zcy|el(ta)?|D(otrahd)?|Jcy|fr|a(shv|rr|gger)))\n\t\t\t\t\t\t  | (e(s(cr|im|dot)|n(sp|g)|c(y|ir(c)?|olon|aron)|t(h|a)|o(pf|gon)|dot|u(ro|ml)|p(si(v|lon)?|lus|ar(sl)?)|e|D(ot|Dot)|q(s(im|lant(less|gtr))|c(irc|olon)|u(iv(DD)?|est|als)|vparsl)|f(Dot|r)|l(s(dot)?|inters|l)?|a(ster|cute)|r(Dot|arr)|g(s(dot)?|rave)?|x(cl|ist|p(onentiale|ectation))|m(sp(1(3|4))?|pty(set|v)?|acr))|E(s(cr|im)|c(y|irc|aron)|ta|o(pf|gon)|NG|dot|uml|TH|psilon|qu(ilibrium|al(Tilde)?)|fr|lement|acute|grave|x(ists|ponentialE)|m(pty(SmallSquare|VerySmallSquare)|acr)))\n\t\t\t\t\t\t  | (f(scr|nof|cy|ilig|o(pf|r(k(v)?|all))|jlig|partint|emale|f(ilig|l(ig|lig)|r)|l(tns|lig|at)|allingdotseq|r(own|a(sl|c(1(2|8|3|4|5|6)|78|2(3|5)|3(8|4|5)|45|5(8|6)))))|F(scr|cy|illed(SmallSquare|VerySmallSquare)|o(uriertrf|pf|rAll)|fr))\n\t\t\t\t\t\t  | (G(scr|c(y|irc|edil)|t|opf|dot|T|Jcy|fr|amma(d)?|reater(Greater|SlantEqual|Tilde|Equal(Less)?|FullEqual|Less)|g|breve)|g(s(cr|im(e|l)?)|n(sim|e(q(q)?)?|E|ap(prox)?)|c(y|irc)|t(c(c|ir)|dot|quest|lPar|r(sim|dot|eq(qless|less)|less|a(pprox|rr)))?|imel|opf|dot|jcy|e(s(cc|dot(o(l)?)?|l(es)?)?|q(slant|q)?|l)?|v(nE|ertneqq)|fr|E(l)?|l(j|E|a)?|a(cute|p|mma(d)?)|rave|g(g)?|breve))\n\t\t\t\t\t\t  | (h(s(cr|trok|lash)|y(phen|bull)|circ|o(ok(leftarrow|rightarrow)|pf|arr|rbar|mtht)|e(llip|arts(uit)?|rcon)|ks(earow|warow)|fr|a(irsp|lf|r(dcy|r(cir|w)?)|milt)|bar|Arr)|H(s(cr|trok)|circ|ilbertSpace|o(pf|rizontalLine)|ump(DownHump|Equal)|fr|a(cek|t)|ARDcy))\n\t\t\t\t\t\t  | (i(s(cr|in(s(v)?|dot|v|E)?)|n(care|t(cal|prod|e(rcal|gers)|larhk)?|odot|fin(tie)?)?|c(y|irc)?|t(ilde)?|i(nfin|i(nt|int)|ota)?|o(cy|ta|pf|gon)|u(kcy|ml)|jlig|prod|e(cy|xcl)|quest|f(f|r)|acute|grave|m(of|ped|a(cr|th|g(part|e|line))))|I(scr|n(t(e(rsection|gral))?|visible(Comma|Times))|c(y|irc)|tilde|o(ta|pf|gon)|dot|u(kcy|ml)|Ocy|Jlig|fr|Ecy|acute|grave|m(plies|a(cr|ginaryI))?))\n\t\t\t\t\t\t  | (j(s(cr|ercy)|c(y|irc)|opf|ukcy|fr|math)|J(s(cr|ercy)|c(y|irc)|opf|ukcy|fr))\n\t\t\t\t\t\t  | (k(scr|hcy|c(y|edil)|opf|jcy|fr|appa(v)?|green)|K(scr|c(y|edil)|Hcy|opf|Jcy|fr|appa))\n\t\t\t\t\t\t  | (l(s(h|cr|trok|im(e|g)?|q(uo(r)?|b)|aquo)|h(ar(d|u(l)?)|blk)|n(sim|e(q(q)?)?|E|ap(prox)?)|c(y|ub|e(il|dil)|aron)|Barr|t(hree|c(c|ir)|imes|dot|quest|larr|r(i(e|f)?|Par))?|Har|o(ng(left(arrow|rightarrow)|rightarrow|mapsto)|times|z(enge|f)?|oparrow(left|right)|p(f|lus|ar)|w(ast|bar)|a(ng|rr)|brk)|d(sh|ca|quo(r)?|r(dhar|ushar))|ur(dshar|uhar)|jcy|par(lt)?|e(s(s(sim|dot|eq(qgtr|gtr)|approx|gtr)|cc|dot(o(r)?)?|g(es)?)?|q(slant|q)?|ft(harpoon(down|up)|threetimes|leftarrows|arrow(tail)?|right(squigarrow|harpoons|arrow(s)?))|g)?|v(nE|ertneqq)|f(isht|loor|r)|E(g)?|l(hard|corner|tri|arr)?|a(ng(d|le)?|cute|t(e(s)?|ail)?|p|emptyv|quo|rr(sim|hk|tl|pl|fs|lp|b(fs)?)?|gran|mbda)|r(har(d)?|corner|tri|arr|m)|g(E)?|m(idot|oust(ache)?)|b(arr|r(k(sl(d|u)|e)|ac(e|k))|brk)|A(tail|arr|rr))|L(s(h|cr|trok)|c(y|edil|aron)|t|o(ng(RightArrow|left(arrow|rightarrow)|rightarrow|Left(RightArrow|Arrow))|pf|wer(RightArrow|LeftArrow))|T|e(ss(Greater|SlantEqual|Tilde|EqualGreater|FullEqual|Less)|ft(Right(Vector|Arrow)|Ceiling|T(ee(Vector|Arrow)?|riangle(Bar|Equal)?)|Do(ubleBracket|wn(TeeVector|Vector(Bar)?))|Up(TeeVector|DownVector|Vector(Bar)?)|Vector(Bar)?|arrow|rightarrow|Floor|A(ngleBracket|rrow(RightArrow|Bar)?)))|Jcy|fr|l(eftarrow)?|a(ng|cute|placetrf|rr|mbda)|midot))\n\t\t\t\t\t\t  | (M(scr|cy|inusPlus|opf|u|e(diumSpace|llintrf)|fr|ap)|m(s(cr|tpos)|ho|nplus|c(y|omma)|i(nus(d(u)?|b)?|cro|d(cir|dot|ast)?)|o(dels|pf)|dash|u(ltimap|map)?|p|easuredangle|DDot|fr|l(cp|dr)|a(cr|p(sto(down|up|left)?)?|l(t(ese)?|e)|rker)))\n\t\t\t\t\t\t  | (n(s(hort(parallel|mid)|c(cue|e|r)?|im(e(q)?)?|u(cc(eq)?|p(set(eq(q)?)?|e|E)?|b(set(eq(q)?)?|e|E)?)|par|qsu(pe|be)|mid)|Rightarrow|h(par|arr|Arr)|G(t(v)?|g)|c(y|ong(dot)?|up|edil|a(p|ron))|t(ilde|lg|riangle(left(eq)?|right(eq)?)|gl)|i(s(d)?|v)?|o(t(ni(v(c|a|b))?|in(dot|v(c|a|b)|E)?)?|pf)|dash|u(m(sp|ero)?)?|jcy|p(olint|ar(sl|t|allel)?|r(cue|e(c(eq)?)?)?)|e(s(im|ear)|dot|quiv|ar(hk|r(ow)?)|xist(s)?|Arr)?|v(sim|infin|Harr|dash|Dash|l(t(rie)?|e|Arr)|ap|r(trie|Arr)|g(t|e))|fr|w(near|ar(hk|r(ow)?)|Arr)|V(dash|Dash)|l(sim|t(ri(e)?)?|dr|e(s(s)?|q(slant|q)?|ft(arrow|rightarrow))?|E|arr|Arr)|a(ng|cute|tur(al(s)?)?|p(id|os|prox|E)?|bla)|r(tri(e)?|ightarrow|arr(c|w)?|Arr)|g(sim|t(r)?|e(s|q(slant|q)?)?|E)|mid|L(t(v)?|eft(arrow|rightarrow)|l)|b(sp|ump(e)?))|N(scr|c(y|edil|aron)|tilde|o(nBreakingSpace|Break|t(R(ightTriangle(Bar|Equal)?|everseElement)|Greater(Greater|SlantEqual|Tilde|Equal|FullEqual|Less)?|S(u(cceeds(SlantEqual|Tilde|Equal)?|perset(Equal)?|bset(Equal)?)|quareSu(perset(Equal)?|bset(Equal)?))|Hump(DownHump|Equal)|Nested(GreaterGreater|LessLess)|C(ongruent|upCap)|Tilde(Tilde|Equal|FullEqual)?|DoubleVerticalBar|Precedes(SlantEqual|Equal)?|E(qual(Tilde)?|lement|xists)|VerticalBar|Le(ss(Greater|SlantEqual|Tilde|Equal|Less)?|ftTriangle(Bar|Equal)?))?|pf)|u|e(sted(GreaterGreater|LessLess)|wLine|gative(MediumSpace|Thi(nSpace|ckSpace)|VeryThinSpace))|Jcy|fr|acute))\n\t\t\t\t\t\t  | (o(s(cr|ol|lash)|h(m|bar)|c(y|ir(c)?)|ti(lde|mes(as)?)|S|int|opf|d(sold|iv|ot|ash|blac)|uml|p(erp|lus|ar)|elig|vbar|f(cir|r)|l(c(ir|ross)|t|ine|arr)|a(st|cute)|r(slope|igof|or|d(er(of)?|f|m)?|v|arr)?|g(t|on|rave)|m(i(nus|cron|d)|ega|acr))|O(s(cr|lash)|c(y|irc)|ti(lde|mes)|opf|dblac|uml|penCurly(DoubleQuote|Quote)|ver(B(ar|rac(e|ket))|Parenthesis)|fr|Elig|acute|r|grave|m(icron|ega|acr)))\n\t\t\t\t\t\t  | (p(s(cr|i)|h(i(v)?|one|mmat)|cy|i(tchfork|v)?|o(intint|und|pf)|uncsp|er(cnt|tenk|iod|p|mil)|fr|l(us(sim|cir|two|d(o|u)|e|acir|mn|b)?|an(ck(h)?|kv))|ar(s(im|l)|t|a(llel)?)?|r(sim|n(sim|E|ap)|cue|ime(s)?|o(d|p(to)?|f(surf|line|alar))|urel|e(c(sim|n(sim|eqq|approx)|curlyeq|eq|approx)?)?|E|ap)?|m)|P(s(cr|i)|hi|cy|i|o(incareplane|pf)|fr|lusMinus|artialD|r(ime|o(duct|portion(al)?)|ecedes(SlantEqual|Tilde|Equal)?)?))\n\t\t\t\t\t\t  | (q(scr|int|opf|u(ot|est(eq)?|at(int|ernions))|prime|fr)|Q(scr|opf|UOT|fr))\n\t\t\t\t\t\t  | (R(s(h|cr)|ho|c(y|edil|aron)|Barr|ight(Ceiling|T(ee(Vector|Arrow)?|riangle(Bar|Equal)?)|Do(ubleBracket|wn(TeeVector|Vector(Bar)?))|Up(TeeVector|DownVector|Vector(Bar)?)|Vector(Bar)?|arrow|Floor|A(ngleBracket|rrow(Bar|LeftArrow)?))|o(undImplies|pf)|uleDelayed|e(verse(UpEquilibrium|E(quilibrium|lement)))?|fr|EG|a(ng|cute|rr(tl)?)|rightarrow)|r(s(h|cr|q(uo(r)?|b)|aquo)|h(o(v)?|ar(d|u(l)?))|nmid|c(y|ub|e(il|dil)|aron)|Barr|t(hree|imes|ri(e|f|ltri)?)|i(singdotseq|ng|ght(squigarrow|harpoon(down|up)|threetimes|left(harpoons|arrows)|arrow(tail)?|rightarrows))|Har|o(times|p(f|lus|ar)|a(ng|rr)|brk)|d(sh|ca|quo(r)?|ldhar)|uluhar|p(polint|ar(gt)?)|e(ct|al(s|ine|part)?|g)|f(isht|loor|r)|l(har|arr|m)|a(ng(d|e|le)?|c(ute|e)|t(io(nals)?|ail)|dic|emptyv|quo|rr(sim|hk|c|tl|pl|fs|w|lp|ap|b(fs)?)?)|rarr|x|moust(ache)?|b(arr|r(k(sl(d|u)|e)|ac(e|k))|brk)|A(tail|arr|rr)))\n\t\t\t\t\t\t  | (s(s(cr|tarf|etmn|mile)|h(y|c(hcy|y)|ort(parallel|mid)|arp)|c(sim|y|n(sim|E|ap)|cue|irc|polint|e(dil)?|E|a(p|ron))?|t(ar(f)?|r(ns|aight(phi|epsilon)))|i(gma(v|f)?|m(ne|dot|plus|e(q)?|l(E)?|rarr|g(E)?)?)|zlig|o(pf|ftcy|l(b(ar)?)?)|dot(e|b)?|u(ng|cc(sim|n(sim|eqq|approx)|curlyeq|eq|approx)?|p(s(im|u(p|b)|et(neq(q)?|eq(q)?)?)|hs(ol|ub)|1|n(e|E)|2|d(sub|ot)|3|plus|e(dot)?|E|larr|mult)?|m|b(s(im|u(p|b)|et(neq(q)?|eq(q)?)?)|n(e|E)|dot|plus|e(dot)?|E|rarr|mult)?)|pa(des(uit)?|r)|e(swar|ct|tm(n|inus)|ar(hk|r(ow)?)|xt|mi|Arr)|q(su(p(set(eq)?|e)?|b(set(eq)?|e)?)|c(up(s)?|ap(s)?)|u(f|ar(e|f))?)|fr(own)?|w(nwar|ar(hk|r(ow)?)|Arr)|larr|acute|rarr|m(t(e(s)?)?|i(d|le)|eparsl|a(shp|llsetminus))|bquo)|S(scr|hort(RightArrow|DownArrow|UpArrow|LeftArrow)|c(y|irc|edil|aron)?|tar|igma|H(cy|CHcy)|opf|u(c(hThat|ceeds(SlantEqual|Tilde|Equal)?)|p(set|erset(Equal)?)?|m|b(set(Equal)?)?)|OFTcy|q(uare(Su(perset(Equal)?|bset(Equal)?)|Intersection|Union)?|rt)|fr|acute|mallCircle))\n\t\t\t\t\t\t  | (t(s(hcy|c(y|r)|trok)|h(i(nsp|ck(sim|approx))|orn|e(ta(sym|v)?|re(4|fore))|k(sim|ap))|c(y|edil|aron)|i(nt|lde|mes(d|b(ar)?)?)|o(sa|p(cir|f(ork)?|bot)?|ea)|dot|prime|elrec|fr|w(ixt|ohead(leftarrow|rightarrow))|a(u|rget)|r(i(sb|time|dot|plus|e|angle(down|q|left(eq)?|right(eq)?)?|minus)|pezium|ade)|brk)|T(s(cr|trok)|RADE|h(i(nSpace|ckSpace)|e(ta|refore))|c(y|edil|aron)|S(cy|Hcy)|ilde(Tilde|Equal|FullEqual)?|HORN|opf|fr|a(u|b)|ripleDot))\n\t\t\t\t\t\t  | (u(scr|h(ar(l|r)|blk)|c(y|irc)|t(ilde|dot|ri(f)?)|Har|o(pf|gon)|d(har|arr|blac)|u(arr|ml)|p(si(h|lon)?|harpoon(left|right)|downarrow|uparrows|lus|arrow)|f(isht|r)|wangle|l(c(orn(er)?|rop)|tri)|a(cute|rr)|r(c(orn(er)?|rop)|tri|ing)|grave|m(l|acr)|br(cy|eve)|Arr)|U(scr|n(ion(Plus)?|der(B(ar|rac(e|ket))|Parenthesis))|c(y|irc)|tilde|o(pf|gon)|dblac|uml|p(si(lon)?|downarrow|Tee(Arrow)?|per(RightArrow|LeftArrow)|DownArrow|Equilibrium|arrow|Arrow(Bar|DownArrow)?)|fr|a(cute|rr(ocir)?)|ring|grave|macr|br(cy|eve)))\n\t\t\t\t\t\t  | (v(s(cr|u(pn(e|E)|bn(e|E)))|nsu(p|b)|cy|Bar(v)?|zigzag|opf|dash|prop|e(e(eq|bar)?|llip|r(t|bar))|Dash|fr|ltri|a(ngrt|r(s(igma|u(psetneq(q)?|bsetneq(q)?))|nothing|t(heta|riangle(left|right))|p(hi|i|ropto)|epsilon|kappa|r(ho)?))|rtri|Arr)|V(scr|cy|opf|dash(l)?|e(e|r(yThinSpace|t(ical(Bar|Separator|Tilde|Line))?|bar))|Dash|vdash|fr|bar))\n\t\t\t\t\t\t  | (w(scr|circ|opf|p|e(ierp|d(ge(q)?|bar))|fr|r(eath)?)|W(scr|circ|opf|edge|fr))\n\t\t\t\t\t\t  | (X(scr|i|opf|fr)|x(s(cr|qcup)|h(arr|Arr)|nis|c(irc|up|ap)|i|o(time|dot|p(f|lus))|dtri|u(tri|plus)|vee|fr|wedge|l(arr|Arr)|r(arr|Arr)|map))\n\t\t\t\t\t\t  | (y(scr|c(y|irc)|icy|opf|u(cy|ml)|en|fr|ac(y|ute))|Y(scr|c(y|irc)|opf|uml|Icy|Ucy|fr|acute|Acy))\n\t\t\t\t\t\t  | (z(scr|hcy|c(y|aron)|igrarr|opf|dot|e(ta|etrf)|fr|w(nj|j)|acute)|Z(scr|c(y|aron)|Hcy|opf|dot|e(ta|roWidthSpace)|fr|acute))\n\t\t\t\t\t\t)\n\t\t\t\t\t\t(;)\n\t\t\t\t\t",
          "name": "constant.character.entity.named.$2.html"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.entity.html"
            },
            "3": {
              "name": "punctuation.definition.entity.html"
            }
          },
          "match": "(&)#[0-9]+(;)",
          "name": "constant.character.entity.numeric.decimal.html"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.entity.html"
            },
            "3": {
              "name": "punctuation.definition.entity.html"
            }
          },
          "match": "(&)#[xX][0-9a-fA-F]+(;)",
          "name": "constant.character.entity.numeric.hexadecimal.html"
        },
        {
          "match": "&(?=[a-zA-Z0-9]+;)",
          "name": "invalid.illegal.ambiguous-ampersand.html"
        }
      ]
    },
    "tags-invalid": {
      "patterns": [
        {
          "begin": "(</?)((\\w[^\\s>]*))(?<!/)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            },
            "3": {
              "name": "invalid.illegal.unrecognized-tag.html"
            }
          },
          "end": "((?: ?/)?>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.other.$2.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        }
      ]
    },
    "tags-valid": {
      "patterns": [
        {
          "begin": "(^[ \\t]+)?(?=<(?i:style)\\b(?!-))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.embedded.leading.html"
            }
          },
          "end": "(?!\\G)([ \\t]*$\\n?)?",
          "endCaptures": {
            "1": {
              "name": "punctuation.whitespace.embedded.trailing.html"
            }
          },
          "patterns": [
            {
              "begin": "(?i)(<)(style)(?=\\s|/?>)",
              "beginCaptures": {
                "0": {
                  "name": "meta.tag.metadata.style.start.html"
                },
                "1": {
                  "name": "punctuation.definition.tag.begin.html"
                },
                "2": {
                  "name": "entity.name.tag.html"
                }
              },
              "end": "(?i)((<)/)(style)\\s*(>)",
              "endCaptures": {
                "0": {
                  "name": "meta.tag.metadata.style.end.html"
                },
                "1": {
                  "name": "punctuation.definition.tag.begin.html"
                },
                "2": {
                  "name": "source.css-ignored-vscode"
                },
                "3": {
                  "name": "entity.name.tag.html"
                },
                "4": {
                  "name": "punctuation.definition.tag.end.html"
                }
              },
              "name": "meta.embedded.block.html",
              "patterns": [
                {
                  "begin": "\\G",
                  "captures": {
                    "1": {
                      "name": "punctuation.definition.tag.end.html"
                    }
                  },
                  "end": "(>)",
                  "name": "meta.tag.metadata.style.start.html",
                  "patterns": [
                    {
                      "include": "#attribute"
                    }
                  ]
                },
                {
                  "begin": "(?!\\G)",
                  "end": "(?=</(?i:style))",
                  "name": "source.css",
                  "patterns": [
                    {
                      "include": "source.css"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "begin": "(^[ \\t]+)?(?=<(?i:script)\\b(?!-))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.embedded.leading.html"
            }
          },
          "end": "(?!\\G)([ \\t]*$\\n?)?",
          "endCaptures": {
            "1": {
              "name": "punctuation.whitespace.embedded.trailing.html"
            }
          },
          "patterns": [
            {
              "begin": "(<)((?i:script))\\b",
              "beginCaptures": {
                "0": {
                  "name": "meta.tag.metadata.script.start.html"
                },
                "1": {
                  "name": "punctuation.definition.tag.begin.html"
                },
                "2": {
                  "name": "entity.name.tag.html"
                }
              },
              "end": "(/)((?i:script))(>)",
              "endCaptures": {
                "0": {
                  "name": "meta.tag.metadata.script.end.html"
                },
                "1": {
                  "name": "punctuation.definition.tag.begin.html"
                },
                "2": {
                  "name": "entity.name.tag.html"
                },
                "3": {
                  "name": "punctuation.definition.tag.end.html"
                }
              },
              "name": "meta.embedded.block.html",
              "patterns": [
                {
                  "begin": "\\G",
                  "end": "(?=/)",
                  "patterns": [
                    {
                      "begin": "(>)",
                      "beginCaptures": {
                        "0": {
                          "name": "meta.tag.metadata.script.start.html"
                        },
                        "1": {
                          "name": "punctuation.definition.tag.end.html"
                        }
                      },
                      "end": "((<))(?=/(?i:script))",
                      "endCaptures": {
                        "0": {
                          "name": "meta.tag.metadata.script.end.html"
                        },
                        "1": {
                          "name": "punctuation.definition.tag.begin.html"
                        },
                        "2": {
                          "name": "source.js-ignored-vscode"
                        }
                      },
                      "patterns": [
                        {
                          "begin": "\\G",
                          "end": "(?=</(?i:script))",
                          "name": "source.js",
                          "patterns": [
                            {
                              "begin": "(^[ \\t]+)?(?=//)",
                              "beginCaptures": {
                                "1": {
                                  "name": "punctuation.whitespace.comment.leading.js"
                                }
                              },
                              "end": "(?!\\G)",
                              "patterns": [
                                {
                                  "begin": "//",
                                  "beginCaptures": {
                                    "0": {
                                      "name": "punctuation.definition.comment.js"
                                    }
                                  },
                                  "end": "(?=</script)|\\n",
                                  "name": "comment.line.double-slash.js"
                                }
                              ]
                            },
                            {
                              "begin": "/\\*",
                              "captures": {
                                "0": {
                                  "name": "punctuation.definition.comment.js"
                                }
                              },
                              "end": "\\*/|(?=</script)",
                              "name": "comment.block.js"
                            },
                            {
                              "include": "source.js"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "begin": "\\G",
                      "end": "(?ix:\n\t\t\t\t\t\t\t\t\t\t\t\t(?=>\t\t\t\t\t\t\t\t\t\t\t# Tag without type attribute\n\t\t\t\t\t\t\t\t\t\t\t\t  | type(?=[\\s=])\n\t\t\t\t\t\t\t\t\t\t\t\t  \t(?!\\s*=\\s*\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t''\t\t\t\t\t\t\t\t# Empty\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | \"\"\t\t\t\t\t\t\t\t\t#   Values\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | ('|\"|)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttext/\t\t\t\t\t\t\t# Text mime-types\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tjavascript(1\\.[0-5])?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | x-javascript\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | jscript\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | livescript\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | (x-)?ecmascript\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | babel\t\t\t\t\t\t# Javascript variant currently\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t#   recognized as such\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | application/\t\t\t\t\t# Application mime-types\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(x-)?javascript\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | (x-)?ecmascript\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | module\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\\s\"'>]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t)",
                      "name": "meta.tag.metadata.script.start.html",
                      "patterns": [
                        {
                          "include": "#attribute"
                        }
                      ]
                    },
                    {
                      "begin": "(?ix:\n\t\t\t\t\t\t\t\t\t\t\t\t(?=\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype\\s*=\\s*\n\t\t\t\t\t\t\t\t\t\t\t\t\t('|\"|)\n\t\t\t\t\t\t\t\t\t\t\t\t\ttext/\n\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tx-handlebars\n\t\t\t\t\t\t\t\t\t\t\t\t\t  | (x-(handlebars-)?|ng-)?template\n\t\t\t\t\t\t\t\t\t\t\t\t\t  | html\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\\s\"'>]\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t)",
                      "end": "((<))(?=/(?i:script))",
                      "endCaptures": {
                        "0": {
                          "name": "meta.tag.metadata.script.end.html"
                        },
                        "1": {
                          "name": "punctuation.definition.tag.begin.html"
                        },
                        "2": {
                          "name": "text.html.basic"
                        }
                      },
                      "patterns": [
                        {
                          "begin": "\\G",
                          "end": "(>)",
                          "endCaptures": {
                            "1": {
                              "name": "punctuation.definition.tag.end.html"
                            }
                          },
                          "name": "meta.tag.metadata.script.start.html",
                          "patterns": [
                            {
                              "include": "#attribute"
                            }
                          ]
                        },
                        {
                          "begin": "(?!\\G)",
                          "end": "(?=</(?i:script))",
                          "name": "text.html.basic",
                          "patterns": [
                            {
                              "include": "text.html.basic"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "begin": "(?=(?i:type))",
                      "end": "(<)(?=/(?i:script))",
                      "endCaptures": {
                        "0": {
                          "name": "meta.tag.metadata.script.end.html"
                        },
                        "1": {
                          "name": "punctuation.definition.tag.begin.html"
                        }
                      },
                      "patterns": [
                        {
                          "begin": "\\G",
                          "end": "(>)",
                          "endCaptures": {
                            "1": {
                              "name": "punctuation.definition.tag.end.html"
                            }
                          },
                          "name": "meta.tag.metadata.script.start.html",
                          "patterns": [
                            {
                              "include": "#attribute"
                            }
                          ]
                        },
                        {
                          "begin": "(?!\\G)",
                          "end": "(?=</(?i:script))",
                          "name": "source.unknown"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "begin": "(?i)(<)(base|link|meta)(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            }
          },
          "end": "/?>",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.metadata.$2.void.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(?i)(<)(noscript|title)(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.metadata.$2.start.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(?i)(</)(noscript|title)(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.metadata.$2.end.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(?i)(<)(import|col|hr|input)(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            }
          },
          "end": "/?>",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.structure.$2.void.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(?i)(<)(address|article|aside|blockquote|body|button|caption|colgroup|datalist|dd|details|dialog|div|dl|dt|fieldset|figcaption|figure|footer|form|head|header|hgroup|html|h[1-6]|label|legend|li|main|map|menu|meter|nav|ol|optgroup|option|output|p|pre|progress|section|select|slot|summary|table|tbody|td|template|textarea|tfoot|th|thead|tr|ul)(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.structure.$2.start.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(?i)(</)(address|article|aside|blockquote|body|button|caption|colgroup|datalist|dd|details|dialog|div|dl|dt|fieldset|figcaption|figure|footer|form|head|header|hgroup|html|h[1-6]|label|legend|li|main|map|menu|meter|nav|ol|optgroup|option|output|p|pre|progress|section|select|slot|summary|table|tbody|td|template|textarea|tfoot|th|thead|tr|ul)(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.structure.$2.end.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(?i)(<)(area|br|wbr)(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            }
          },
          "end": "/?>",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.inline.$2.void.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(?i)(<)(import|a|abbr|b|bdi|bdo|cite|code|data|del|dfn|em|i|ins|kbd|mark|q|rp|rt|ruby|s|samp|small|span|strong|sub|sup|time|u|var)(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.inline.$2.start.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(?i)(</)(a|abbr|b|bdi|bdo|cite|code|data|del|dfn|em|i|ins|kbd|mark|q|rp|rt|ruby|s|samp|small|span|strong|sub|sup|time|u|var)(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.inline.$2.end.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(?i)(<)(embed|img|param|source|track)(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            }
          },
          "end": "/?>",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.object.$2.void.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(?i)(<)(audio|canvas|iframe|object|picture|video)(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.object.$2.start.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(?i)(</)(audio|canvas|iframe|object|picture|video)(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.object.$2.end.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(?i)(<)((basefont|isindex))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            },
            "3": {
              "name": "invalid.deprecated.html"
            }
          },
          "end": "/?>",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.metadata.$2.void.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(?i)(<)((center|frameset|noembed|noframes))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            },
            "3": {
              "name": "invalid.deprecated.html"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.structure.$2.start.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(?i)(</)((center|frameset|noembed|noframes))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            },
            "3": {
              "name": "invalid.deprecated.html"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.structure.$2.end.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(?i)(<)((acronym|big|blink|font|strike|tt|xmp))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            },
            "3": {
              "name": "invalid.deprecated.html"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.inline.$2.start.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(?i)(</)((acronym|big|blink|font|strike|tt|xmp))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            },
            "3": {
              "name": "invalid.deprecated.html"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.inline.$2.end.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(?i)(<)((frame))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            },
            "3": {
              "name": "invalid.deprecated.html"
            }
          },
          "end": "/?>",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.object.$2.void.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(?i)(<)((applet))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            },
            "3": {
              "name": "invalid.deprecated.html"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.object.$2.start.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(?i)(</)((applet))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            },
            "3": {
              "name": "invalid.deprecated.html"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.object.$2.end.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(?i)(<)((dir|keygen|listing|menuitem|plaintext|spacer))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            },
            "3": {
              "name": "invalid.illegal.no-longer-supported.html"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.other.$2.start.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(?i)(</)((dir|keygen|listing|menuitem|plaintext|spacer))(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            },
            "3": {
              "name": "invalid.illegal.no-longer-supported.html"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.other.$2.end.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "include": "#math"
        },
        {
          "include": "#svg"
        },
        {
          "begin": "(<)([a-zA-Z][.0-9_a-zA-Z\\x{00B7}\\x{00C0}-\\x{00D6}\\x{00D8}-\\x{00F6}\\x{00F8}-\\x{037D}\\x{037F}-\\x{1FFF}\\x{200C}-\\x{200D}\\x{203F}-\\x{2040}\\x{2070}-\\x{218F}\\x{2C00}-\\x{2FEF}\\x{3001}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFFD}\\x{10000}-\\x{EFFFF}]*-[\\-.0-9_a-zA-Z\\x{00B7}\\x{00C0}-\\x{00D6}\\x{00D8}-\\x{00F6}\\x{00F8}-\\x{037D}\\x{037F}-\\x{1FFF}\\x{200C}-\\x{200D}\\x{203F}-\\x{2040}\\x{2070}-\\x{218F}\\x{2C00}-\\x{2FEF}\\x{3001}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFFD}\\x{10000}-\\x{EFFFF}]*)(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            }
          },
          "end": "/?>",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.custom.start.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        },
        {
          "begin": "(</)([a-zA-Z][.0-9_a-zA-Z\\x{00B7}\\x{00C0}-\\x{00D6}\\x{00D8}-\\x{00F6}\\x{00F8}-\\x{037D}\\x{037F}-\\x{1FFF}\\x{200C}-\\x{200D}\\x{203F}-\\x{2040}\\x{2070}-\\x{218F}\\x{2C00}-\\x{2FEF}\\x{3001}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFFD}\\x{10000}-\\x{EFFFF}]*-[\\-.0-9_a-zA-Z\\x{00B7}\\x{00C0}-\\x{00D6}\\x{00D8}-\\x{00F6}\\x{00F8}-\\x{037D}\\x{037F}-\\x{1FFF}\\x{200C}-\\x{200D}\\x{203F}-\\x{2040}\\x{2070}-\\x{218F}\\x{2C00}-\\x{2FEF}\\x{3001}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFFD}\\x{10000}-\\x{EFFFF}]*)(?=\\s|/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.custom.end.html",
          "patterns": [
            {
              "include": "#attribute"
            }
          ]
        }
      ]
    },
    "xml-processing": {
      "begin": "(<\\?)(xml)",
      "captures": {
        "1": {
          "name": "punctuation.definition.tag.html"
        },
        "2": {
          "name": "entity.name.tag.html"
        }
      },
      "end": "(\\?>)",
      "name": "meta.tag.metadata.processing.xml.html",
      "patterns": [
        {
          "include": "#attribute"
        }
      ]
		},
		
    "shebang": {
      "name": "comment.line.shebang.js.jsx",
      "match": "\\A(#!).*(?=$)",
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.js.jsx"
        }
      }
    },
    "statements": {
      "patterns": [
        {
          "include": "#declaration"
        },
        {
          "include": "#control-statement"
        },
        {
          "include": "#after-operator-block-as-object-literal"
        },
        {
          "include": "#decl-block"
        },
        {
          "include": "#label"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-semicolon"
        },
        {
          "include": "#string"
        },
        {
          "include": "#comment"
        }
      ]
    },
    "declaration": {
      "patterns": [
        {
          "include": "#decorator"
        },
        {
          "include": "#var-expr"
        },
        {
          "include": "#function-declaration"
        },
        {
          "include": "#class-declaration"
        },
        {
          "include": "#interface-declaration"
        },
        {
          "include": "#enum-declaration"
        },
        {
          "include": "#namespace-declaration"
        },
        {
          "include": "#type-alias-declaration"
        },
        {
          "include": "#import-equals-declaration"
        },
        {
          "include": "#import-declaration"
        },
        {
          "include": "#export-declaration"
        },
        {
          "name": "storage.modifier.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(declare|export)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        }
      ]
    },
    "control-statement": {
      "patterns": [
        {
          "include": "#switch-statement"
        },
        {
          "include": "#for-loop"
        },
        {
          "name": "keyword.control.trycatch.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(catch|finally|throw|try)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(break|continue|goto)\\s+([_$[:alpha:]][_$[:alnum:]]*)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          "captures": {
            "1": {
              "name": "keyword.control.loop.js.jsx"
            },
            "2": {
              "name": "entity.name.label.js.jsx"
            }
          }
        },
        {
          "name": "keyword.control.loop.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(break|continue|do|goto|while)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "keyword.control.flow.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(return)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "keyword.control.switch.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(case|default|switch)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "include": "#if-statement"
        },
        {
          "name": "keyword.control.conditional.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(else|if)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "keyword.control.with.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(with)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "keyword.control.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(package)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "keyword.other.debugger.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(debugger)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        }
      ]
    },
    "label": {
      "patterns": [
        {
          "begin": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)(?=\\s*\\{)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.label.js.jsx"
            },
            "2": {
              "name": "punctuation.separator.label.js.jsx"
            }
          },
          "end": "(?<=\\})",
          "patterns": [
            {
              "include": "#decl-block"
            }
          ]
        },
        {
          "match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)",
          "captures": {
            "1": {
              "name": "entity.name.label.js.jsx"
            },
            "2": {
              "name": "punctuation.separator.label.js.jsx"
            }
          }
        }
      ]
    },
    "expression": {
      "patterns": [
        {
          "include": "#expressionWithoutIdentifiers"
        },
        {
          "include": "#identifiers"
        },
        {
          "include": "#expressionPunctuations"
        }
      ]
    },
    "expressionWithoutIdentifiers": {
      "patterns": [
        {
          "include": "#jsx"
        },
        {
          "include": "#string"
        },
        {
          "include": "#regex"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#function-expression"
        },
        {
          "include": "#class-expression"
        },
        {
          "include": "#arrow-function"
        },
        {
          "include": "#paren-expression-possibly-arrow"
        },
        {
          "include": "#cast"
        },
        {
          "include": "#ternary-expression"
        },
        {
          "include": "#new-expr"
        },
        {
          "include": "#instanceof-expr"
        },
        {
          "include": "#object-literal"
        },
        {
          "include": "#expression-operators"
        },
        {
          "include": "#function-call"
        },
        {
          "include": "#literal"
        },
        {
          "include": "#support-objects"
        },
        {
          "include": "#paren-expression"
        }
      ]
    },
    "expressionPunctuations": {
      "patterns": [
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#punctuation-accessor"
        }
      ]
    },
    "decorator": {
      "name": "meta.decorator.js.jsx",
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))\\@",
      "beginCaptures": {
        "0": {
          "name": "punctuation.decorator.js.jsx"
        }
      },
      "end": "(?=\\s)",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "var-expr": {
      "patterns": [
        {
          "name": "meta.var.expr.js.jsx",
          "begin": "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(var|let)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))",
          "end": "(?!(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(var|let)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|^\\s*$|;|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))|((?<!^let|[^\\._$[:alnum:]]let|^var|[^\\._$[:alnum:]]var)(?=\\s*$)))",
          "patterns": [
            {
              "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(var|let)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*",
              "beginCaptures": {
                "1": {
                  "name": "keyword.control.export.js.jsx"
                },
                "2": {
                  "name": "storage.modifier.js.jsx"
                },
                "3": {
                  "name": "storage.type.js.jsx"
                }
              },
              "end": "(?=\\S)"
            },
            {
              "include": "#destructuring-variable"
            },
            {
              "include": "#var-single-variable"
            },
            {
              "include": "#variable-initializer"
            },
            {
              "include": "#comment"
            },
            {
              "begin": "(,)\\s*((?!\\S)|(?=\\/\\/))",
              "beginCaptures": {
                "1": {
                  "name": "punctuation.separator.comma.js.jsx"
                }
              },
              "end": "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))",
              "patterns": [
                {
                  "include": "#single-line-comment-consuming-line-ending"
                },
                {
                  "include": "#comment"
                },
                {
                  "include": "#destructuring-variable"
                },
                {
                  "include": "#var-single-variable"
                },
                {
                  "include": "#punctuation-comma"
                }
              ]
            },
            {
              "include": "#punctuation-comma"
            }
          ]
        },
        {
          "name": "meta.var.expr.js.jsx",
          "begin": "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.export.js.jsx"
            },
            "2": {
              "name": "storage.modifier.js.jsx"
            },
            "3": {
              "name": "storage.type.js.jsx"
            }
          },
          "end": "(?!(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|^\\s*$|;|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))|((?<!^const|[^\\._$[:alnum:]]const)(?=\\s*$)))",
          "patterns": [
            {
              "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*",
              "beginCaptures": {
                "1": {
                  "name": "keyword.control.export.js.jsx"
                },
                "2": {
                  "name": "storage.modifier.js.jsx"
                },
                "3": {
                  "name": "storage.type.js.jsx"
                }
              },
              "end": "(?=\\S)"
            },
            {
              "include": "#destructuring-const"
            },
            {
              "include": "#var-single-const"
            },
            {
              "include": "#variable-initializer"
            },
            {
              "include": "#comment"
            },
            {
              "begin": "(,)\\s*((?!\\S)|(?=\\/\\/))",
              "beginCaptures": {
                "1": {
                  "name": "punctuation.separator.comma.js.jsx"
                }
              },
              "end": "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))",
              "patterns": [
                {
                  "include": "#single-line-comment-consuming-line-ending"
                },
                {
                  "include": "#comment"
                },
                {
                  "include": "#destructuring-const"
                },
                {
                  "include": "#var-single-const"
                },
                {
                  "include": "#punctuation-comma"
                }
              ]
            },
            {
              "include": "#punctuation-comma"
            }
          ]
        }
      ]
    },
    "var-single-variable": {
      "patterns": [
        {
          "name": "meta.var-single-variable.expr.js.jsx",
          "begin": "(?x)([_$[:alpha:]][_$[:alnum:]]*)(\\!)?(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                                              # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)) |\n(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=>|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                                              # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)))",
          "beginCaptures": {
            "1": {
              "name": "meta.definition.variable.js.jsx entity.name.function.js.jsx"
            },
            "2": {
              "name": "keyword.operator.definiteassignment.js.jsx"
            }
          },
          "end": "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))",
          "patterns": [
            {
              "include": "#var-single-variable-type-annotation"
            }
          ]
        },
        {
          "name": "meta.var-single-variable.expr.js.jsx",
          "begin": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])(\\!)?",
          "beginCaptures": {
            "1": {
              "name": "meta.definition.variable.js.jsx variable.other.constant.js.jsx"
            },
            "2": {
              "name": "keyword.operator.definiteassignment.js.jsx"
            }
          },
          "end": "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))",
          "patterns": [
            {
              "include": "#var-single-variable-type-annotation"
            }
          ]
        },
        {
          "name": "meta.var-single-variable.expr.js.jsx",
          "begin": "([_$[:alpha:]][_$[:alnum:]]*)(\\!)?",
          "beginCaptures": {
            "1": {
              "name": "meta.definition.variable.js.jsx variable.other.readwrite.js.jsx"
            },
            "2": {
              "name": "keyword.operator.definiteassignment.js.jsx"
            }
          },
          "end": "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))",
          "patterns": [
            {
              "include": "#var-single-variable-type-annotation"
            }
          ]
        }
      ]
    },
    "var-single-const": {
      "patterns": [
        {
          "name": "meta.var-single-variable.expr.js.jsx",
          "begin": "(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                                              # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)) |\n(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=>|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                                              # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)))",
          "beginCaptures": {
            "1": {
              "name": "meta.definition.variable.js.jsx variable.other.constant.js.jsx entity.name.function.js.jsx"
            }
          },
          "end": "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))",
          "patterns": [
            {
              "include": "#var-single-variable-type-annotation"
            }
          ]
        },
        {
          "name": "meta.var-single-variable.expr.js.jsx",
          "begin": "([_$[:alpha:]][_$[:alnum:]]*)",
          "beginCaptures": {
            "1": {
              "name": "meta.definition.variable.js.jsx variable.other.constant.js.jsx"
            }
          },
          "end": "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))",
          "patterns": [
            {
              "include": "#var-single-variable-type-annotation"
            }
          ]
        }
      ]
    },
    "var-single-variable-type-annotation": {
      "patterns": [
        {
          "include": "#type-annotation"
        },
        {
          "include": "#string"
        },
        {
          "include": "#comment"
        }
      ]
    },
    "destructuring-variable": {
      "patterns": [
        {
          "name": "meta.object-binding-pattern-variable.js.jsx",
          "begin": "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\{)",
          "end": "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))",
          "patterns": [
            {
              "include": "#object-binding-pattern"
            },
            {
              "include": "#type-annotation"
            },
            {
              "include": "#comment"
            }
          ]
        },
        {
          "name": "meta.array-binding-pattern-variable.js.jsx",
          "begin": "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\[)",
          "end": "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))",
          "patterns": [
            {
              "include": "#array-binding-pattern"
            },
            {
              "include": "#type-annotation"
            },
            {
              "include": "#comment"
            }
          ]
        }
      ]
    },
    "destructuring-const": {
      "patterns": [
        {
          "name": "meta.object-binding-pattern-variable.js.jsx",
          "begin": "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\{)",
          "end": "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))",
          "patterns": [
            {
              "include": "#object-binding-pattern-const"
            },
            {
              "include": "#type-annotation"
            },
            {
              "include": "#comment"
            }
          ]
        },
        {
          "name": "meta.array-binding-pattern-variable.js.jsx",
          "begin": "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\[)",
          "end": "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))",
          "patterns": [
            {
              "include": "#array-binding-pattern-const"
            },
            {
              "include": "#type-annotation"
            },
            {
              "include": "#comment"
            }
          ]
        }
      ]
    },
    "object-binding-element": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "begin": "(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))",
          "end": "(?=,|\\})",
          "patterns": [
            {
              "include": "#object-binding-element-propertyName"
            },
            {
              "include": "#binding-element"
            }
          ]
        },
        {
          "include": "#object-binding-pattern"
        },
        {
          "include": "#destructuring-variable-rest"
        },
        {
          "include": "#variable-initializer"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "object-binding-element-const": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "begin": "(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))",
          "end": "(?=,|\\})",
          "patterns": [
            {
              "include": "#object-binding-element-propertyName"
            },
            {
              "include": "#binding-element-const"
            }
          ]
        },
        {
          "include": "#object-binding-pattern-const"
        },
        {
          "include": "#destructuring-variable-rest-const"
        },
        {
          "include": "#variable-initializer"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "object-binding-element-propertyName": {
      "begin": "(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))",
      "end": "(:)",
      "endCaptures": {
        "0": {
          "name": "punctuation.destructuring.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#string"
        },
        {
          "include": "#array-literal"
        },
        {
          "include": "#numeric-literal"
        },
        {
          "name": "variable.object.property.js.jsx",
          "match": "([_$[:alpha:]][_$[:alnum:]]*)"
        }
      ]
    },
    "binding-element": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#string"
        },
        {
          "include": "#numeric-literal"
        },
        {
          "include": "#regex"
        },
        {
          "include": "#object-binding-pattern"
        },
        {
          "include": "#array-binding-pattern"
        },
        {
          "include": "#destructuring-variable-rest"
        },
        {
          "include": "#variable-initializer"
        }
      ]
    },
    "binding-element-const": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#string"
        },
        {
          "include": "#numeric-literal"
        },
        {
          "include": "#regex"
        },
        {
          "include": "#object-binding-pattern-const"
        },
        {
          "include": "#array-binding-pattern-const"
        },
        {
          "include": "#destructuring-variable-rest-const"
        },
        {
          "include": "#variable-initializer"
        }
      ]
    },
    "destructuring-variable-rest": {
      "match": "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)",
      "captures": {
        "1": {
          "name": "keyword.operator.rest.js.jsx"
        },
        "2": {
          "name": "meta.definition.variable.js.jsx variable.other.readwrite.js.jsx"
        }
      }
    },
    "destructuring-variable-rest-const": {
      "match": "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)",
      "captures": {
        "1": {
          "name": "keyword.operator.rest.js.jsx"
        },
        "2": {
          "name": "meta.definition.variable.js.jsx variable.other.constant.js.jsx"
        }
      }
    },
    "object-binding-pattern": {
      "begin": "(?:(\\.\\.\\.)\\s*)?(\\{)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.rest.js.jsx"
        },
        "2": {
          "name": "punctuation.definition.binding-pattern.object.js.jsx"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.binding-pattern.object.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#object-binding-element"
        }
      ]
    },
    "object-binding-pattern-const": {
      "begin": "(?:(\\.\\.\\.)\\s*)?(\\{)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.rest.js.jsx"
        },
        "2": {
          "name": "punctuation.definition.binding-pattern.object.js.jsx"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.binding-pattern.object.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#object-binding-element-const"
        }
      ]
    },
    "array-binding-pattern": {
      "begin": "(?:(\\.\\.\\.)\\s*)?(\\[)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.rest.js.jsx"
        },
        "2": {
          "name": "punctuation.definition.binding-pattern.array.js.jsx"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.binding-pattern.array.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#binding-element"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "array-binding-pattern-const": {
      "begin": "(?:(\\.\\.\\.)\\s*)?(\\[)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.rest.js.jsx"
        },
        "2": {
          "name": "punctuation.definition.binding-pattern.array.js.jsx"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.binding-pattern.array.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#binding-element-const"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "parameter-name": {
      "patterns": [
        {
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|protected|private|readonly)\\s+(?=(public|protected|private|readonly)\\s+)",
          "captures": {
            "1": {
              "name": "storage.modifier.js.jsx"
            }
          }
        },
        {
          "match": "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                                              # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)) |\n(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=>|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                                              # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)))",
          "captures": {
            "1": {
              "name": "storage.modifier.js.jsx"
            },
            "2": {
              "name": "keyword.operator.rest.js.jsx"
            },
            "3": {
              "name": "entity.name.function.js.jsx variable.language.this.js.jsx"
            },
            "4": {
              "name": "entity.name.function.js.jsx"
            },
            "5": {
              "name": "keyword.operator.optional.js.jsx"
            }
          }
        },
        {
          "match": "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)",
          "captures": {
            "1": {
              "name": "storage.modifier.js.jsx"
            },
            "2": {
              "name": "keyword.operator.rest.js.jsx"
            },
            "3": {
              "name": "variable.parameter.js.jsx variable.language.this.js.jsx"
            },
            "4": {
              "name": "variable.parameter.js.jsx"
            },
            "5": {
              "name": "keyword.operator.optional.js.jsx"
            }
          }
        }
      ]
    },
    "destructuring-parameter": {
      "patterns": [
        {
          "name": "meta.parameter.object-binding-pattern.js.jsx",
          "begin": "(?<!=|:)\\s*(?:(\\.\\.\\.)\\s*)?(\\{)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.rest.js.jsx"
            },
            "2": {
              "name": "punctuation.definition.binding-pattern.object.js.jsx"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.binding-pattern.object.js.jsx"
            }
          },
          "patterns": [
            {
              "include": "#parameter-object-binding-element"
            }
          ]
        },
        {
          "name": "meta.paramter.array-binding-pattern.js.jsx",
          "begin": "(?<!=|:)\\s*(?:(\\.\\.\\.)\\s*)?(\\[)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.rest.js.jsx"
            },
            "2": {
              "name": "punctuation.definition.binding-pattern.array.js.jsx"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.binding-pattern.array.js.jsx"
            }
          },
          "patterns": [
            {
              "include": "#parameter-binding-element"
            },
            {
              "include": "#punctuation-comma"
            }
          ]
        }
      ]
    },
    "parameter-object-binding-element": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "begin": "(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))",
          "end": "(?=,|\\})",
          "patterns": [
            {
              "include": "#object-binding-element-propertyName"
            },
            {
              "include": "#parameter-binding-element"
            }
          ]
        },
        {
          "include": "#parameter-object-binding-pattern"
        },
        {
          "include": "#destructuring-parameter-rest"
        },
        {
          "include": "#variable-initializer"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "parameter-binding-element": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#string"
        },
        {
          "include": "#numeric-literal"
        },
        {
          "include": "#regex"
        },
        {
          "include": "#parameter-object-binding-pattern"
        },
        {
          "include": "#parameter-array-binding-pattern"
        },
        {
          "include": "#destructuring-parameter-rest"
        },
        {
          "include": "#variable-initializer"
        }
      ]
    },
    "destructuring-parameter-rest": {
      "match": "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)",
      "captures": {
        "1": {
          "name": "keyword.operator.rest.js.jsx"
        },
        "2": {
          "name": "variable.parameter.js.jsx"
        }
      }
    },
    "parameter-object-binding-pattern": {
      "begin": "(?:(\\.\\.\\.)\\s*)?(\\{)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.rest.js.jsx"
        },
        "2": {
          "name": "punctuation.definition.binding-pattern.object.js.jsx"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.binding-pattern.object.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#parameter-object-binding-element"
        }
      ]
    },
    "parameter-array-binding-pattern": {
      "begin": "(?:(\\.\\.\\.)\\s*)?(\\[)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.rest.js.jsx"
        },
        "2": {
          "name": "punctuation.definition.binding-pattern.array.js.jsx"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.binding-pattern.array.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#parameter-binding-element"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "field-declaration": {
      "name": "meta.field.declaration.js.jsx",
      "begin": "(?x)(?<!\\()(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(readonly)\\s+)?(?=\\s*((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|(\\#?[_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(?:(?:(\\?)|(\\!))\\s*)?(=|:|;|,|\\}|$))",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.js.jsx"
        }
      },
      "end": "(?x)(?=\\}|;|,|$|(^(?!\\s*((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|(\\#?[_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(?:(?:(\\?)|(\\!))\\s*)?(=|:|;|,|$))))|(?<=\\})",
      "patterns": [
        {
          "include": "#variable-initializer"
        },
        {
          "include": "#type-annotation"
        },
        {
          "include": "#string"
        },
        {
          "include": "#array-literal"
        },
        {
          "include": "#numeric-literal"
        },
        {
          "include": "#comment"
        },
        {
          "match": "(?x)(\\#?[_$[:alpha:]][_$[:alnum:]]*)(?:(\\?)|(\\!))?(?=\\s*\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                                              # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)) |\n(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=>|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                                              # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)))",
          "captures": {
            "1": {
              "name": "meta.definition.property.js.jsx entity.name.function.js.jsx"
            },
            "2": {
              "name": "keyword.operator.optional.js.jsx"
            },
            "3": {
              "name": "keyword.operator.definiteassignment.js.jsx"
            }
          }
        },
        {
          "name": "meta.definition.property.js.jsx variable.object.property.js.jsx",
          "match": "\\#?[_$[:alpha:]][_$[:alnum:]]*"
        },
        {
          "name": "keyword.operator.optional.js.jsx",
          "match": "\\?"
        },
        {
          "name": "keyword.operator.definiteassignment.js.jsx",
          "match": "\\!"
        }
      ]
    },
    "variable-initializer": {
      "patterns": [
        {
          "begin": "(?<!=|!)(=)(?!=)(?=\\s*\\S)(?!\\s*.*=>\\s*$)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.assignment.js.jsx"
            }
          },
          "end": "(?=$|^|[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "begin": "(?<!=|!)(=)(?!=)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.assignment.js.jsx"
            }
          },
          "end": "(?=[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))|(?=^\\s*$)|(?<=\\S)(?<!=)(?=\\s*$)",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        }
      ]
    },
    "function-declaration": {
      "name": "meta.function.js.jsx",
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.export.js.jsx"
        },
        "2": {
          "name": "storage.modifier.js.jsx"
        },
        "3": {
          "name": "storage.modifier.async.js.jsx"
        },
        "4": {
          "name": "storage.type.function.js.jsx"
        },
        "5": {
          "name": "keyword.generator.asterisk.js.jsx"
        },
        "6": {
          "name": "meta.definition.function.js.jsx entity.name.function.js.jsx"
        }
      },
      "end": "(?=;|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))|(?<=\\})",
      "patterns": [
        {
          "include": "#function-name"
        },
        {
          "include": "#function-body"
        }
      ]
    },
    "function-expression": {
      "name": "meta.function.expression.js.jsx",
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.async.js.jsx"
        },
        "2": {
          "name": "storage.type.function.js.jsx"
        },
        "3": {
          "name": "keyword.generator.asterisk.js.jsx"
        },
        "4": {
          "name": "meta.definition.function.js.jsx entity.name.function.js.jsx"
        }
      },
      "end": "(?=;)|(?<=\\})",
      "patterns": [
        {
          "include": "#function-name"
        },
        {
          "include": "#single-line-comment-consuming-line-ending"
        },
        {
          "include": "#function-body"
        }
      ]
    },
    "function-name": {
      "name": "meta.definition.function.js.jsx entity.name.function.js.jsx",
      "match": "[_$[:alpha:]][_$[:alnum:]]*"
    },
    "function-body": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#type-parameters"
        },
        {
          "include": "#function-parameters"
        },
        {
          "include": "#return-type"
        },
        {
          "include": "#decl-block"
        },
        {
          "name": "keyword.generator.asterisk.js.jsx",
          "match": "\\*"
        }
      ]
    },
    "method-declaration": {
      "patterns": [
        {
          "name": "meta.method.declaration.js.jsx",
          "begin": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?\\s*\\b(constructor)\\b(?!:)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.js.jsx"
            },
            "2": {
              "name": "storage.modifier.js.jsx"
            },
            "3": {
              "name": "storage.modifier.async.js.jsx"
            },
            "4": {
              "name": "storage.type.js.jsx"
            }
          },
          "end": "(?=\\}|;|,|$)|(?<=\\})",
          "patterns": [
            {
              "include": "#method-declaration-name"
            },
            {
              "include": "#function-body"
            }
          ]
        },
        {
          "name": "meta.method.declaration.js.jsx",
          "begin": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:(?:\\s*\\b(new)\\b(?!:)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|(?:(\\*)\\s*)?)(?=\\s*((<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.js.jsx"
            },
            "2": {
              "name": "storage.modifier.js.jsx"
            },
            "3": {
              "name": "storage.modifier.async.js.jsx"
            },
            "4": {
              "name": "keyword.operator.new.js.jsx"
            },
            "5": {
              "name": "keyword.generator.asterisk.js.jsx"
            }
          },
          "end": "(?=\\}|;|,|$)|(?<=\\})",
          "patterns": [
            {
              "include": "#method-declaration-name"
            },
            {
              "include": "#function-body"
            }
          ]
        },
        {
          "name": "meta.method.declaration.js.jsx",
          "begin": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.js.jsx"
            },
            "2": {
              "name": "storage.modifier.js.jsx"
            },
            "3": {
              "name": "storage.modifier.async.js.jsx"
            },
            "4": {
              "name": "storage.type.property.js.jsx"
            },
            "5": {
              "name": "keyword.generator.asterisk.js.jsx"
            }
          },
          "end": "(?=\\}|;|,|$)|(?<=\\})",
          "patterns": [
            {
              "include": "#method-declaration-name"
            },
            {
              "include": "#function-body"
            }
          ]
        }
      ]
    },
    "object-literal-method-declaration": {
      "name": "meta.method.declaration.js.jsx",
      "begin": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.async.js.jsx"
        },
        "2": {
          "name": "storage.type.property.js.jsx"
        },
        "3": {
          "name": "keyword.generator.asterisk.js.jsx"
        }
      },
      "end": "(?=\\}|;|,)|(?<=\\})",
      "patterns": [
        {
          "include": "#method-declaration-name"
        },
        {
          "include": "#function-body"
        },
        {
          "begin": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.async.js.jsx"
            },
            "2": {
              "name": "storage.type.property.js.jsx"
            },
            "3": {
              "name": "keyword.generator.asterisk.js.jsx"
            }
          },
          "end": "(?=\\(|\\<)",
          "patterns": [
            {
              "include": "#method-declaration-name"
            }
          ]
        }
      ]
    },
    "method-declaration-name": {
      "begin": "(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??)\\s*[\\(\\<])",
      "end": "(?=\\(|\\<)",
      "patterns": [
        {
          "include": "#string"
        },
        {
          "include": "#array-literal"
        },
        {
          "include": "#numeric-literal"
        },
        {
          "name": "meta.definition.method.js.jsx entity.name.function.js.jsx",
          "match": "[_$[:alpha:]][_$[:alnum:]]*"
        },
        {
          "name": "keyword.operator.optional.js.jsx",
          "match": "\\?"
        }
      ]
    },
    "arrow-function": {
      "patterns": [
        {
          "name": "meta.arrow.js.jsx",
          "match": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(\\basync)\\s+)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(?==>)",
          "captures": {
            "1": {
              "name": "storage.modifier.async.js.jsx"
            },
            "2": {
              "name": "variable.parameter.js.jsx"
            }
          }
        },
        {
          "name": "meta.arrow.js.jsx",
          "begin": "(?x) (?:\n  (?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(\\basync)\n)? ((?<![})!\\]])\\s*\n  (?=\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                                              # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  )\n)",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.async.js.jsx"
            }
          },
          "end": "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\\s+))",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#type-parameters"
            },
            {
              "include": "#function-parameters"
            },
            {
              "include": "#arrow-return-type"
            },
            {
              "include": "#possibly-arrow-return-type"
            }
          ]
        },
        {
          "name": "meta.arrow.js.jsx",
          "begin": "=>",
          "beginCaptures": {
            "0": {
              "name": "storage.type.function.arrow.js.jsx"
            }
          },
          "end": "((?<=\\}|\\S)(?<!=>)|((?!\\{)(?=\\S)))(?!\\/[\\/\\*])",
          "patterns": [
            {
              "include": "#single-line-comment-consuming-line-ending"
            },
            {
              "include": "#decl-block"
            },
            {
              "include": "#expression"
            }
          ]
        }
      ]
    },
    "indexer-declaration": {
      "name": "meta.indexer.declaration.js.jsx",
      "begin": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(readonly)\\s*)?\\s*(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:)",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.js.jsx"
        },
        "2": {
          "name": "meta.brace.square.js.jsx"
        },
        "3": {
          "name": "variable.parameter.js.jsx"
        }
      },
      "end": "(\\])\\s*(\\?\\s*)?|$",
      "endCaptures": {
        "1": {
          "name": "meta.brace.square.js.jsx"
        },
        "2": {
          "name": "keyword.operator.optional.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#type-annotation"
        }
      ]
    },
    "indexer-mapped-type-declaration": {
      "name": "meta.indexer.mappedtype.declaration.js.jsx",
      "begin": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))([+-])?(readonly)\\s*)?\\s*(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s+(in)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.type.modifier.js.jsx"
        },
        "2": {
          "name": "storage.modifier.js.jsx"
        },
        "3": {
          "name": "meta.brace.square.js.jsx"
        },
        "4": {
          "name": "entity.name.type.js.jsx"
        },
        "5": {
          "name": "keyword.operator.expression.in.js.jsx"
        }
      },
      "end": "(\\])([+-])?\\s*(\\?\\s*)?|$",
      "endCaptures": {
        "1": {
          "name": "meta.brace.square.js.jsx"
        },
        "2": {
          "name": "keyword.operator.type.modifier.js.jsx"
        },
        "3": {
          "name": "keyword.operator.optional.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#type"
        }
      ]
    },
    "function-parameters": {
      "name": "meta.parameters.js.jsx",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.begin.js.jsx"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.end.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#function-parameters-body"
        }
      ]
    },
    "function-parameters-body": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#string"
        },
        {
          "include": "#decorator"
        },
        {
          "include": "#destructuring-parameter"
        },
        {
          "include": "#parameter-name"
        },
        {
          "include": "#parameter-type-annotation"
        },
        {
          "include": "#variable-initializer"
        },
        {
          "name": "punctuation.separator.parameter.js.jsx",
          "match": ","
        }
      ]
    },
    "class-declaration": {
      "name": "meta.class.js.jsx",
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(?:(abstract)\\s+)?\\b(class)\\b(?=\\s+|/[/*])",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.export.js.jsx"
        },
        "2": {
          "name": "storage.modifier.js.jsx"
        },
        "3": {
          "name": "storage.modifier.js.jsx"
        },
        "4": {
          "name": "storage.type.class.js.jsx"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#class-declaration-or-expression-patterns"
        }
      ]
    },
    "class-expression": {
      "name": "meta.class.js.jsx",
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(abstract)\\s+)?(class)\\b(?=\\s+|[<{]|\\/[\\/*])",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.js.jsx"
        },
        "2": {
          "name": "storage.type.class.js.jsx"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#class-declaration-or-expression-patterns"
        }
      ]
    },
    "class-declaration-or-expression-patterns": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#class-or-interface-heritage"
        },
        {
          "match": "[_$[:alpha:]][_$[:alnum:]]*",
          "captures": {
            "0": {
              "name": "entity.name.type.class.js.jsx"
            }
          }
        },
        {
          "include": "#type-parameters"
        },
        {
          "include": "#class-or-interface-body"
        }
      ]
    },
    "interface-declaration": {
      "name": "meta.interface.js.jsx",
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(?:(abstract)\\s+)?\\b(interface)\\b(?=\\s+|/[/*])",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.export.js.jsx"
        },
        "2": {
          "name": "storage.modifier.js.jsx"
        },
        "3": {
          "name": "storage.modifier.js.jsx"
        },
        "4": {
          "name": "storage.type.interface.js.jsx"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#class-or-interface-heritage"
        },
        {
          "match": "[_$[:alpha:]][_$[:alnum:]]*",
          "captures": {
            "0": {
              "name": "entity.name.type.interface.js.jsx"
            }
          }
        },
        {
          "include": "#type-parameters"
        },
        {
          "include": "#class-or-interface-body"
        }
      ]
    },
    "class-or-interface-heritage": {
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(extends|implements)\\b)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.js.jsx"
        }
      },
      "end": "(?=\\{)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#class-or-interface-heritage"
        },
        {
          "include": "#type-parameters"
        },
        {
          "include": "#expressionWithoutIdentifiers"
        },
        {
          "match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s*\\??\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)*\\s*)",
          "captures": {
            "1": {
              "name": "entity.name.type.module.js.jsx"
            },
            "2": {
              "name": "punctuation.accessor.js.jsx"
            },
            "3": {
              "name": "punctuation.accessor.optional.js.jsx"
            }
          }
        },
        {
          "match": "([_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "entity.other.inherited-class.js.jsx"
            }
          }
        },
        {
          "include": "#expressionPunctuations"
        }
      ]
    },
    "class-or-interface-body": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.js.jsx"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#decorator"
        },
        {
          "begin": "(?<=:)\\s*",
          "end": "(?=\\s|[;),}\\]:\\-\\+]|;|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "include": "#method-declaration"
        },
        {
          "include": "#indexer-declaration"
        },
        {
          "include": "#field-declaration"
        },
        {
          "include": "#string"
        },
        {
          "include": "#type-annotation"
        },
        {
          "include": "#variable-initializer"
        },
        {
          "include": "#access-modifier"
        },
        {
          "include": "#property-accessor"
        },
        {
          "include": "#async-modifier"
        },
        {
          "include": "#after-operator-block-as-object-literal"
        },
        {
          "include": "#decl-block"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "access-modifier": {
      "name": "storage.modifier.js.jsx",
      "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(abstract|public|protected|private|readonly|static|declare)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
    },
    "property-accessor": {
      "name": "storage.type.property.js.jsx",
      "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(get|set)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
    },
    "async-modifier": {
      "name": "storage.modifier.async.js.jsx",
      "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(async)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
    },
    "enum-declaration": {
      "name": "meta.enum.declaration.js.jsx",
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?(?:\\b(const)\\s+)?\\b(enum)\\s+([_$[:alpha:]][_$[:alnum:]]*)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.export.js.jsx"
        },
        "2": {
          "name": "storage.modifier.js.jsx"
        },
        "3": {
          "name": "storage.modifier.js.jsx"
        },
        "4": {
          "name": "storage.type.enum.js.jsx"
        },
        "5": {
          "name": "entity.name.type.enum.js.jsx"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.block.js.jsx"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.block.js.jsx"
            }
          },
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "begin": "([_$[:alpha:]][_$[:alnum:]]*)",
              "beginCaptures": {
                "0": {
                  "name": "variable.other.enummember.js.jsx"
                }
              },
              "end": "(?=,|\\}|$)",
              "patterns": [
                {
                  "include": "#comment"
                },
                {
                  "include": "#variable-initializer"
                }
              ]
            },
            {
              "begin": "(?=((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\])))",
              "end": "(?=,|\\}|$)",
              "patterns": [
                {
                  "include": "#string"
                },
                {
                  "include": "#array-literal"
                },
                {
                  "include": "#comment"
                },
                {
                  "include": "#variable-initializer"
                }
              ]
            },
            {
              "include": "#punctuation-comma"
            }
          ]
        }
      ]
    },
    "namespace-declaration": {
      "name": "meta.namespace.declaration.js.jsx",
      "begin": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(namespace|module)\\s+(?=[_$[:alpha:]\"'`]))",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.export.js.jsx"
        },
        "2": {
          "name": "storage.modifier.js.jsx"
        },
        "3": {
          "name": "storage.type.namespace.js.jsx"
        }
      },
      "end": "(?<=\\})|(?=;|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#string"
        },
        {
          "name": "entity.name.type.module.js.jsx",
          "match": "([_$[:alpha:]][_$[:alnum:]]*)"
        },
        {
          "include": "#punctuation-accessor"
        },
        {
          "include": "#decl-block"
        }
      ]
    },
    "type-alias-declaration": {
      "name": "meta.type.declaration.js.jsx",
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(type)\\b\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.export.js.jsx"
        },
        "2": {
          "name": "storage.modifier.js.jsx"
        },
        "3": {
          "name": "storage.type.type.js.jsx"
        },
        "4": {
          "name": "entity.name.type.alias.js.jsx"
        }
      },
      "end": "(?=\\}|;|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#type-parameters"
        },
        {
          "begin": "(=)\\s*",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.assignment.js.jsx"
            }
          },
          "end": "(?=\\}|;|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      ]
    },
    "import-equals-declaration": {
      "patterns": [
        {
          "name": "meta.import-equals.external.js.jsx",
          "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type))?\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(require)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.export.js.jsx"
            },
            "2": {
              "name": "storage.modifier.js.jsx"
            },
            "3": {
              "name": "keyword.control.import.js.jsx"
            },
            "4": {
              "name": "keyword.control.type.js.jsx"
            },
            "5": {
              "name": "variable.other.readwrite.alias.js.jsx"
            },
            "6": {
              "name": "keyword.operator.assignment.js.jsx"
            },
            "7": {
              "name": "keyword.control.require.js.jsx"
            },
            "8": {
              "name": "meta.brace.round.js.jsx"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.js.jsx"
            }
          },
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#string"
            }
          ]
        },
        {
          "name": "meta.import-equals.internal.js.jsx",
          "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type))?\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(?!require\\b)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.export.js.jsx"
            },
            "2": {
              "name": "storage.modifier.js.jsx"
            },
            "3": {
              "name": "keyword.control.import.js.jsx"
            },
            "4": {
              "name": "keyword.control.type.js.jsx"
            },
            "5": {
              "name": "variable.other.readwrite.alias.js.jsx"
            },
            "6": {
              "name": "keyword.operator.assignment.js.jsx"
            }
          },
          "end": "(?=;|$|^)",
          "patterns": [
            {
              "include": "#single-line-comment-consuming-line-ending"
            },
            {
              "include": "#comment"
            },
            {
              "match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))",
              "captures": {
                "1": {
                  "name": "entity.name.type.module.js.jsx"
                },
                "2": {
                  "name": "punctuation.accessor.js.jsx"
                },
                "3": {
                  "name": "punctuation.accessor.optional.js.jsx"
                }
              }
            },
            {
              "name": "variable.other.readwrite.js.jsx",
              "match": "([_$[:alpha:]][_$[:alnum:]]*)"
            }
          ]
        }
      ]
    },
    "import-declaration": {
      "name": "meta.import.js.jsx",
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type)(?!\\s+from))?(?!\\s*[:\\(])(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.export.js.jsx"
        },
        "2": {
          "name": "storage.modifier.js.jsx"
        },
        "3": {
          "name": "keyword.control.import.js.jsx"
        },
        "4": {
          "name": "keyword.control.type.js.jsx"
        }
      },
      "end": "(?<!^import|[^\\._$[:alnum:]]import)(?=;|$|^)",
      "patterns": [
        {
          "include": "#single-line-comment-consuming-line-ending"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#string"
        },
        {
          "begin": "(?<=^import|[^\\._$[:alnum:]]import)(?!\\s*[\"'])",
          "end": "\\bfrom\\b",
          "endCaptures": {
            "0": {
              "name": "keyword.control.from.js.jsx"
            }
          },
          "patterns": [
            {
              "include": "#import-export-declaration"
            }
          ]
        },
        {
          "include": "#import-export-declaration"
        }
      ]
    },
    "export-declaration": {
      "patterns": [
        {
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)\\s+(as)\\s+(namespace)\\s+([_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "keyword.control.export.js.jsx"
            },
            "2": {
              "name": "keyword.control.as.js.jsx"
            },
            "3": {
              "name": "storage.type.namespace.js.jsx"
            },
            "4": {
              "name": "entity.name.type.module.js.jsx"
            }
          }
        },
        {
          "name": "meta.export.default.js.jsx",
          "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)(?:\\s+(type))?(?:(?:\\s*(=))|(?:\\s+(default)(?=\\s+)))",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.export.js.jsx"
            },
            "2": {
              "name": "keyword.control.type.js.jsx"
            },
            "3": {
              "name": "keyword.operator.assignment.js.jsx"
            },
            "4": {
              "name": "keyword.control.default.js.jsx"
            }
          },
          "end": "(?=$|;|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))",
          "patterns": [
            {
              "include": "#interface-declaration"
            },
            {
              "include": "#expression"
            }
          ]
        },
        {
          "name": "meta.export.js.jsx",
          "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)(?:\\s+(type))?\\b(?!(\\$)|(\\s*:))((?=\\s*[\\{*])|((?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s|,))(?!\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b)))",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.export.js.jsx"
            },
            "2": {
              "name": "keyword.control.type.js.jsx"
            }
          },
          "end": "(?=$|;|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))",
          "patterns": [
            {
              "include": "#import-export-declaration"
            }
          ]
        }
      ]
    },
    "import-export-declaration": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#string"
        },
        {
          "include": "#import-export-block"
        },
        {
          "name": "keyword.control.from.js.jsx",
          "match": "\\bfrom\\b"
        },
        {
          "include": "#import-export-clause"
        }
      ]
    },
    "import-export-block": {
      "name": "meta.block.js.jsx",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.js.jsx"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#import-export-clause"
        }
      ]
    },
    "import-export-clause": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bdefault)|(\\*)|(\\b[_$[:alpha:]][_$[:alnum:]]*))\\s+(as)\\s+(?:(default(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|([_$[:alpha:]][_$[:alnum:]]*))",
          "captures": {
            "1": {
              "name": "keyword.control.default.js.jsx"
            },
            "2": {
              "name": "constant.language.import-export-all.js.jsx"
            },
            "3": {
              "name": "variable.other.readwrite.js.jsx"
            },
            "4": {
              "name": "keyword.control.as.js.jsx"
            },
            "5": {
              "name": "keyword.control.default.js.jsx"
            },
            "6": {
              "name": "variable.other.readwrite.alias.js.jsx"
            }
          }
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "name": "constant.language.import-export-all.js.jsx",
          "match": "\\*"
        },
        {
          "name": "keyword.control.default.js.jsx",
          "match": "\\b(default)\\b"
        },
        {
          "name": "variable.other.readwrite.alias.js.jsx",
          "match": "([_$[:alpha:]][_$[:alnum:]]*)"
        }
      ]
    },
    "switch-statement": {
      "name": "switch-statement.expr.js.jsx",
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?=\\bswitch\\s*\\()",
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "name": "switch-expression.expr.js.jsx",
          "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(switch)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.switch.js.jsx"
            },
            "2": {
              "name": "meta.brace.round.js.jsx"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.js.jsx"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "name": "switch-block.expr.js.jsx",
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.block.js.jsx"
            }
          },
          "end": "(?=\\})",
          "patterns": [
            {
              "name": "case-clause.expr.js.jsx",
              "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(case|default(?=:))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
              "beginCaptures": {
                "1": {
                  "name": "keyword.control.switch.js.jsx"
                }
              },
              "end": "(?=:)",
              "patterns": [
                {
                  "include": "#expression"
                }
              ]
            },
            {
              "begin": "(:)\\s*(\\{)",
              "beginCaptures": {
                "1": {
                  "name": "case-clause.expr.js.jsx punctuation.definition.section.case-statement.js.jsx"
                },
                "2": {
                  "name": "meta.block.js.jsx punctuation.definition.block.js.jsx"
                }
              },
              "end": "\\}",
              "endCaptures": {
                "0": {
                  "name": "meta.block.js.jsx punctuation.definition.block.js.jsx"
                }
              },
              "contentName": "meta.block.js.jsx",
              "patterns": [
                {
                  "include": "#statements"
                }
              ]
            },
            {
              "match": "(:)",
              "captures": {
                "0": {
                  "name": "case-clause.expr.js.jsx punctuation.definition.section.case-statement.js.jsx"
                }
              }
            },
            {
              "include": "#statements"
            }
          ]
        }
      ]
    },
    "for-loop": {
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))for(?=((\\s+|(\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*))await)?\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)?(\\())",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.loop.js.jsx"
        }
      },
      "end": "(?<=\\))",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "name": "keyword.control.loop.js.jsx",
          "match": "await"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.js.jsx"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.js.jsx"
            }
          },
          "patterns": [
            {
              "include": "#var-expr"
            },
            {
              "include": "#expression"
            },
            {
              "include": "#punctuation-semicolon"
            }
          ]
        }
      ]
    },
    "if-statement": {
      "patterns": [
        {
          "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?=\\bif\\s*(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))\\s*(?!\\{))",
          "end": "(?=;|$|\\})",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(if)\\s*(\\()",
              "beginCaptures": {
                "1": {
                  "name": "keyword.control.conditional.js.jsx"
                },
                "2": {
                  "name": "meta.brace.round.js.jsx"
                }
              },
              "end": "\\)",
              "endCaptures": {
                "0": {
                  "name": "meta.brace.round.js.jsx"
                }
              },
              "patterns": [
                {
                  "include": "#expression"
                }
              ]
            },
            {
              "name": "string.regexp.js.jsx",
              "begin": "(?<=\\))\\s*\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\])+\\/([gimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.js.jsx"
                }
              },
              "end": "(/)([gimsuy]*)",
              "endCaptures": {
                "1": {
                  "name": "punctuation.definition.string.end.js.jsx"
                },
                "2": {
                  "name": "keyword.other.js.jsx"
                }
              },
              "patterns": [
                {
                  "include": "#regexp"
                }
              ]
            },
            {
              "include": "#statements"
            }
          ]
        }
      ]
    },
    "decl-block": {
      "name": "meta.block.js.jsx",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.js.jsx"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#statements"
        }
      ]
    },
    "after-operator-block-as-object-literal": {
      "name": "meta.objectliteral.js.jsx",
      "begin": "(?<!\\+\\+|--)(?<=[:=(,\\[?+!>]|^await|[^\\._$[:alnum:]]await|^return|[^\\._$[:alnum:]]return|^yield|[^\\._$[:alnum:]]yield|^throw|[^\\._$[:alnum:]]throw|^in|[^\\._$[:alnum:]]in|^of|[^\\._$[:alnum:]]of|^typeof|[^\\._$[:alnum:]]typeof|&&|\\|\\||\\*)\\s*(\\{)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.block.js.jsx"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#object-member"
        }
      ]
    },
    "object-literal": {
      "name": "meta.objectliteral.js.jsx",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.js.jsx"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#object-member"
        }
      ]
    },
    "object-member": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#object-literal-method-declaration"
        },
        {
          "name": "meta.object.member.js.jsx meta.object-literal.key.js.jsx",
          "begin": "(?=\\[)",
          "end": "(?=:)|((?<=[\\]])(?=\\s*[\\(\\<]))",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#array-literal"
            }
          ]
        },
        {
          "name": "meta.object.member.js.jsx meta.object-literal.key.js.jsx",
          "begin": "(?=[\\'\\\"\\`])",
          "end": "(?=:)|((?<=[\\'\\\"\\`])(?=((\\s*[\\(\\<,}])|(\\s+(as)\\s+))))",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#string"
            }
          ]
        },
        {
          "name": "meta.object.member.js.jsx meta.object-literal.key.js.jsx",
          "begin": "(?x)(?=(\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$)))",
          "end": "(?=:)|(?=\\s*([\\(\\<,}])|(\\s+as\\s+))",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#numeric-literal"
            }
          ]
        },
        {
          "name": "meta.method.declaration.js.jsx",
          "begin": "(?<=[\\]\\'\\\"\\`])(?=\\s*[\\(\\<])",
          "end": "(?=\\}|;|,)|(?<=\\})",
          "patterns": [
            {
              "include": "#function-body"
            }
          ]
        },
        {
          "name": "meta.object.member.js.jsx",
          "match": "(?![_$[:alpha:]])([[:digit:]]+)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)",
          "captures": {
            "0": {
              "name": "meta.object-literal.key.js.jsx"
            },
            "1": {
              "name": "constant.numeric.decimal.js.jsx"
            }
          }
        },
        {
          "name": "meta.object.member.js.jsx",
          "match": "(?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:(\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/)*\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                                              # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)))",
          "captures": {
            "0": {
              "name": "meta.object-literal.key.js.jsx"
            },
            "1": {
              "name": "entity.name.function.js.jsx"
            }
          }
        },
        {
          "name": "meta.object.member.js.jsx",
          "match": "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)",
          "captures": {
            "0": {
              "name": "meta.object-literal.key.js.jsx"
            }
          }
        },
        {
          "name": "meta.object.member.js.jsx",
          "begin": "\\.\\.\\.",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.spread.js.jsx"
            }
          },
          "end": "(?=,|\\})",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "name": "meta.object.member.js.jsx",
          "match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=,|\\}|$|\\/\\/|\\/\\*)",
          "captures": {
            "1": {
              "name": "variable.other.readwrite.js.jsx"
            }
          }
        },
        {
          "name": "meta.object.member.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+(const)(?=\\s*([,}]|$))",
          "captures": {
            "1": {
              "name": "keyword.control.as.js.jsx"
            },
            "2": {
              "name": "storage.modifier.js.jsx"
            }
          }
        },
        {
          "name": "meta.object.member.js.jsx",
          "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.as.js.jsx"
            }
          },
          "end": "(?=$|^|[,}]|\\|\\||\\&\\&|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+))",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        {
          "name": "meta.object.member.js.jsx",
          "begin": "(?=[_$[:alpha:]][_$[:alnum:]]*\\s*=)",
          "end": "(?=,|\\}|$|\\/\\/|\\/\\*)",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "name": "meta.object.member.js.jsx",
          "begin": ":",
          "beginCaptures": {
            "0": {
              "name": "meta.object-literal.key.js.jsx punctuation.separator.key-value.js.jsx"
            }
          },
          "end": "(?=,|\\})",
          "patterns": [
            {
              "begin": "(?<=:)\\s*(async)?(?=\\s*(<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)\\(\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))",
              "beginCaptures": {
                "1": {
                  "name": "storage.modifier.async.js.jsx"
                }
              },
              "end": "(?<=\\))",
              "patterns": [
                {
                  "include": "#type-parameters"
                },
                {
                  "begin": "\\(",
                  "beginCaptures": {
                    "0": {
                      "name": "meta.brace.round.js.jsx"
                    }
                  },
                  "end": "\\)",
                  "endCaptures": {
                    "0": {
                      "name": "meta.brace.round.js.jsx"
                    }
                  },
                  "patterns": [
                    {
                      "include": "#expression-inside-possibly-arrow-parens"
                    }
                  ]
                }
              ]
            },
            {
              "begin": "(?<=:)\\s*(async)?\\s*(\\()(?=\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))",
              "beginCaptures": {
                "1": {
                  "name": "storage.modifier.async.js.jsx"
                },
                "2": {
                  "name": "meta.brace.round.js.jsx"
                }
              },
              "end": "\\)",
              "endCaptures": {
                "0": {
                  "name": "meta.brace.round.js.jsx"
                }
              },
              "patterns": [
                {
                  "include": "#expression-inside-possibly-arrow-parens"
                }
              ]
            },
            {
              "begin": "(?<=:)\\s*(async)?\\s*(?=\\<\\s*$)",
              "beginCaptures": {
                "1": {
                  "name": "storage.modifier.async.js.jsx"
                }
              },
              "end": "(?<=\\>)",
              "patterns": [
                {
                  "include": "#type-parameters"
                }
              ]
            },
            {
              "begin": "(?<=\\>)\\s*(\\()(?=\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))",
              "beginCaptures": {
                "1": {
                  "name": "meta.brace.round.js.jsx"
                }
              },
              "end": "\\)",
              "endCaptures": {
                "0": {
                  "name": "meta.brace.round.js.jsx"
                }
              },
              "patterns": [
                {
                  "include": "#expression-inside-possibly-arrow-parens"
                }
              ]
            },
            {
              "include": "#possibly-arrow-return-type"
            },
            {
              "include": "#expression"
            }
          ]
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "ternary-expression": {
      "begin": "(?!\\?\\.\\s*[^[:digit:]])(\\?)(?!\\?)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.ternary.js.jsx"
        }
      },
      "end": "\\s*(:)",
      "endCaptures": {
        "1": {
          "name": "keyword.operator.ternary.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "function-call": {
      "patterns": [
        {
          "begin": "(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*(((keyof|infer|awaited|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|awaited|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|awaited|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())",
          "end": "(?<=\\))(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*(((keyof|infer|awaited|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|awaited|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|awaited|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())",
          "patterns": [
            {
              "name": "meta.function-call.js.jsx",
              "begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))",
              "end": "(?=\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*(((keyof|infer|awaited|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|awaited|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|awaited|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())",
              "patterns": [
                {
                  "include": "#function-call-target"
                }
              ]
            },
            {
              "include": "#comment"
            },
            {
              "include": "#function-call-optionals"
            },
            {
              "include": "#type-arguments"
            },
            {
              "include": "#paren-expression"
            }
          ]
        },
        {
          "begin": "(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))(<\\s*[\\{\\[\\(]\\s*$))",
          "end": "(?<=\\>)(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))(<\\s*[\\{\\[\\(]\\s*$))",
          "patterns": [
            {
              "name": "meta.function-call.js.jsx",
              "begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))",
              "end": "(?=(<\\s*[\\{\\[\\(]\\s*$))",
              "patterns": [
                {
                  "include": "#function-call-target"
                }
              ]
            },
            {
              "include": "#comment"
            },
            {
              "include": "#function-call-optionals"
            },
            {
              "include": "#type-arguments"
            }
          ]
        }
      ]
    },
    "function-call-target": {
      "patterns": [
        {
          "include": "#support-function-call-identifiers"
        },
        {
          "name": "entity.name.function.js.jsx",
          "match": "(\\#?[_$[:alpha:]][_$[:alnum:]]*)"
        }
      ]
    },
    "function-call-optionals": {
      "patterns": [
        {
          "name": "meta.function-call.js.jsx punctuation.accessor.optional.js.jsx",
          "match": "\\?\\."
        },
        {
          "name": "meta.function-call.js.jsx keyword.operator.definiteassignment.js.jsx",
          "match": "\\!"
        }
      ]
    },
    "support-function-call-identifiers": {
      "patterns": [
        {
          "include": "#literal"
        },
        {
          "include": "#support-objects"
        },
        {
          "include": "#object-identifiers"
        },
        {
          "include": "#punctuation-accessor"
        },
        {
          "name": "keyword.operator.expression.import.js.jsx",
          "match": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))import(?=\\s*[\\(]\\s*[\\\"\\'\\`]))"
        }
      ]
    },
    "new-expr": {
      "name": "new.expr.js.jsx",
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(new)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.new.js.jsx"
        }
      },
      "end": "(?<=\\))|(?=[;),}\\]:\\-\\+]|\\|\\||\\&\\&|$|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))new(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))function((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))",
      "patterns": [
        {
          "include": "#paren-expression"
        },
        {
          "include": "#class-declaration"
        },
        {
          "include": "#type"
        }
      ]
    },
    "instanceof-expr": {
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(instanceof)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.expression.instanceof.js.jsx"
        }
      },
      "end": "(?<=\\))|(?=[;),}\\]:?]|\\|\\||\\&\\&|$|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))function((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))",
      "patterns": [
        {
          "include": "#type"
        }
      ]
    },
    "paren-expression-possibly-arrow": {
      "patterns": [
        {
          "begin": "(?<=[(=,])\\s*(async)?(?=\\s*((<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?\\(\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.async.js.jsx"
            }
          },
          "end": "(?<=\\))",
          "patterns": [
            {
              "include": "#paren-expression-possibly-arrow-with-typeparameters"
            }
          ]
        },
        {
          "begin": "(?<=[(=,]|=>|^return|[^\\._$[:alnum:]]return)\\s*(async)?(?=\\s*((((<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?\\()|(<))\\s*$)",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.async.js.jsx"
            }
          },
          "end": "(?<=\\))",
          "patterns": [
            {
              "include": "#paren-expression-possibly-arrow-with-typeparameters"
            }
          ]
        },
        {
          "include": "#possibly-arrow-return-type"
        }
      ]
    },
    "paren-expression-possibly-arrow-with-typeparameters": {
      "patterns": [
        {
          "include": "#type-parameters"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.js.jsx"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.js.jsx"
            }
          },
          "patterns": [
            {
              "include": "#expression-inside-possibly-arrow-parens"
            }
          ]
        }
      ]
    },
    "expression-inside-possibly-arrow-parens": {
      "patterns": [
        {
          "include": "#expressionWithoutIdentifiers"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#string"
        },
        {
          "include": "#decorator"
        },
        {
          "include": "#destructuring-parameter"
        },
        {
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|protected|private|readonly)\\s+(?=(public|protected|private|readonly)\\s+)",
          "captures": {
            "1": {
              "name": "storage.modifier.js.jsx"
            }
          }
        },
        {
          "match": "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                                              # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)) |\n(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=>|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                                              # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)))",
          "captures": {
            "1": {
              "name": "storage.modifier.js.jsx"
            },
            "2": {
              "name": "keyword.operator.rest.js.jsx"
            },
            "3": {
              "name": "entity.name.function.js.jsx variable.language.this.js.jsx"
            },
            "4": {
              "name": "entity.name.function.js.jsx"
            },
            "5": {
              "name": "keyword.operator.optional.js.jsx"
            }
          }
        },
        {
          "match": "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*[:,]|$)",
          "captures": {
            "1": {
              "name": "storage.modifier.js.jsx"
            },
            "2": {
              "name": "keyword.operator.rest.js.jsx"
            },
            "3": {
              "name": "variable.parameter.js.jsx variable.language.this.js.jsx"
            },
            "4": {
              "name": "variable.parameter.js.jsx"
            },
            "5": {
              "name": "keyword.operator.optional.js.jsx"
            }
          }
        },
        {
          "include": "#type-annotation"
        },
        {
          "include": "#variable-initializer"
        },
        {
          "name": "punctuation.separator.parameter.js.jsx",
          "match": ","
        },
        {
          "include": "#identifiers"
        },
        {
          "include": "#expressionPunctuations"
        }
      ]
    },
    "paren-expression": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.round.js.jsx"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "cast": {
      "patterns": [
        {
          "include": "#jsx"
        }
      ]
    },
    "expression-operators": {
      "patterns": [
        {
          "name": "keyword.control.flow.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(await)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(yield)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?=\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*\\*)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.js.jsx"
            }
          },
          "end": "\\*",
          "endCaptures": {
            "0": {
              "name": "keyword.generator.asterisk.js.jsx"
            }
          },
          "patterns": [
            {
              "include": "#comment"
            }
          ]
        },
        {
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(yield)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?:\\s*(\\*))?",
          "captures": {
            "1": {
              "name": "keyword.control.flow.js.jsx"
            },
            "2": {
              "name": "keyword.generator.asterisk.js.jsx"
            }
          }
        },
        {
          "name": "keyword.operator.expression.delete.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))delete(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "keyword.operator.expression.in.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))in(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()"
        },
        {
          "name": "keyword.operator.expression.of.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))of(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()"
        },
        {
          "name": "keyword.operator.expression.instanceof.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))instanceof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "keyword.operator.new.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))new(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "include": "#typeof-operator"
        },
        {
          "name": "keyword.operator.expression.void.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))void(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+(const)(?=\\s*($|[;,:})\\]]))",
          "captures": {
            "1": {
              "name": "keyword.control.as.js.jsx"
            },
            "2": {
              "name": "storage.modifier.js.jsx"
            }
          }
        },
        {
          "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.as.js.jsx"
            }
          },
          "end": "(?=$|^|[;,:})\\]]|\\|\\||\\&\\&|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+)|(\\s+\\<))",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        {
          "name": "keyword.operator.spread.js.jsx",
          "match": "\\.\\.\\."
        },
        {
          "name": "keyword.operator.assignment.compound.js.jsx",
          "match": "\\*=|(?<!\\()/=|%=|\\+=|\\-="
        },
        {
          "name": "keyword.operator.assignment.compound.bitwise.js.jsx",
          "match": "\\&=|\\^=|<<=|>>=|>>>=|\\|="
        },
        {
          "name": "keyword.operator.bitwise.shift.js.jsx",
          "match": "<<|>>>|>>"
        },
        {
          "name": "keyword.operator.comparison.js.jsx",
          "match": "===|!==|==|!="
        },
        {
          "name": "keyword.operator.relational.js.jsx",
          "match": "<=|>=|<>|<|>"
        },
        {
          "match": "(?<=[_$[:alnum:]])(\\!)\\s*(/)(?![/*])",
          "captures": {
            "1": {
              "name": "keyword.operator.logical.js.jsx"
            },
            "2": {
              "name": "keyword.operator.arithmetic.js.jsx"
            }
          }
        },
        {
          "name": "keyword.operator.logical.js.jsx",
          "match": "\\!|&&|\\|\\||\\?\\?"
        },
        {
          "name": "keyword.operator.bitwise.js.jsx",
          "match": "\\&|~|\\^|\\|"
        },
        {
          "name": "keyword.operator.assignment.js.jsx",
          "match": "\\="
        },
        {
          "name": "keyword.operator.decrement.js.jsx",
          "match": "--"
        },
        {
          "name": "keyword.operator.increment.js.jsx",
          "match": "\\+\\+"
        },
        {
          "name": "keyword.operator.arithmetic.js.jsx",
          "match": "%|\\*|/|-|\\+"
        },
        {
          "begin": "(?<=[_$[:alnum:])\\]])\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)+(/)(?![/*]))",
          "end": "(/)(?!\\*([^\\*]|(\\*[^\\/]))*\\*\\/)",
          "endCaptures": {
            "1": {
              "name": "keyword.operator.arithmetic.js.jsx"
            }
          },
          "patterns": [
            {
              "include": "#comment"
            }
          ]
        },
        {
          "match": "(?<=[_$[:alnum:])\\]])\\s*(/)(?![/*])",
          "captures": {
            "1": {
              "name": "keyword.operator.arithmetic.js.jsx"
            }
          }
        }
      ]
    },
    "typeof-operator": {
      "name": "keyword.operator.expression.typeof.js.jsx",
      "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))typeof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
    },
    "literal": {
      "patterns": [
        {
          "include": "#numeric-literal"
        },
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#undefined-literal"
        },
        {
          "include": "#numericConstant-literal"
        },
        {
          "include": "#array-literal"
        },
        {
          "include": "#this-literal"
        },
        {
          "include": "#super-literal"
        }
      ]
    },
    "array-literal": {
      "name": "meta.array.literal.js.jsx",
      "begin": "\\s*(\\[)",
      "beginCaptures": {
        "1": {
          "name": "meta.brace.square.js.jsx"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "meta.brace.square.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "numeric-literal": {
      "patterns": [
        {
          "name": "constant.numeric.hex.js.jsx",
          "match": "\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "storage.type.numeric.bigint.js.jsx"
            }
          }
        },
        {
          "name": "constant.numeric.binary.js.jsx",
          "match": "\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "storage.type.numeric.bigint.js.jsx"
            }
          }
        },
        {
          "name": "constant.numeric.octal.js.jsx",
          "match": "\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "storage.type.numeric.bigint.js.jsx"
            }
          }
        },
        {
          "match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$)",
          "captures": {
            "0": {
              "name": "constant.numeric.decimal.js.jsx"
            },
            "1": {
              "name": "meta.delimiter.decimal.period.js.jsx"
            },
            "2": {
              "name": "storage.type.numeric.bigint.js.jsx"
            },
            "3": {
              "name": "meta.delimiter.decimal.period.js.jsx"
            },
            "4": {
              "name": "storage.type.numeric.bigint.js.jsx"
            },
            "5": {
              "name": "meta.delimiter.decimal.period.js.jsx"
            },
            "6": {
              "name": "storage.type.numeric.bigint.js.jsx"
            },
            "7": {
              "name": "storage.type.numeric.bigint.js.jsx"
            },
            "8": {
              "name": "meta.delimiter.decimal.period.js.jsx"
            },
            "9": {
              "name": "storage.type.numeric.bigint.js.jsx"
            },
            "10": {
              "name": "meta.delimiter.decimal.period.js.jsx"
            },
            "11": {
              "name": "storage.type.numeric.bigint.js.jsx"
            },
            "12": {
              "name": "meta.delimiter.decimal.period.js.jsx"
            },
            "13": {
              "name": "storage.type.numeric.bigint.js.jsx"
            },
            "14": {
              "name": "storage.type.numeric.bigint.js.jsx"
            }
          }
        }
      ]
    },
    "boolean-literal": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "constant.language.boolean.false.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        }
      ]
    },
    "null-literal": {
      "name": "constant.language.null.js.jsx",
      "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))null(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
    },
    "this-literal": {
      "name": "variable.language.this.js.jsx",
      "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))this\\b(?!\\$)"
    },
    "super-literal": {
      "name": "variable.language.super.js.jsx",
      "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))super\\b(?!\\$)"
    },
    "undefined-literal": {
      "name": "constant.language.undefined.js.jsx",
      "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))undefined(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
    },
    "numericConstant-literal": {
      "patterns": [
        {
          "name": "constant.language.nan.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))NaN(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "constant.language.infinity.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Infinity(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        }
      ]
    },
    "support-objects": {
      "patterns": [
        {
          "name": "variable.language.arguments.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(arguments)\\b(?!\\$)"
        },
        {
          "name": "support.class.builtin.js.jsx",
          "match": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(Array|ArrayBuffer|Atomics|BigInt|BigInt64Array|BigUint64Array|Boolean|DataView|Date|Float32Array\n  |Float64Array|Function|Generator|GeneratorFunction|Int8Array|Int16Array|Int32Array|Intl|Map|Number|Object|Proxy\n  |Reflect|RegExp|Set|SharedArrayBuffer|SIMD|String|Symbol|TypedArray\n  |Uint8Array|Uint16Array|Uint32Array|Uint8ClampedArray|WeakMap|WeakSet)\\b(?!\\$)"
        },
        {
          "name": "support.class.error.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))((Eval|Internal|Range|Reference|Syntax|Type|URI)?Error)\\b(?!\\$)"
        },
        {
          "name": "support.class.promise.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(Promise)\\b(?!\\$)"
        },
        {
          "name": "support.function.js.jsx",
          "match": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(clear(Interval|Timeout)|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|\n  isFinite|isNaN|parseFloat|parseInt|require|set(Interval|Timeout)|super|unescape|uneval)(?=\\s*\\()"
        },
        {
          "match": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(Math)(?:\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(?:\n  (abs|acos|acosh|asin|asinh|atan|atan2|atanh|cbrt|ceil|clz32|cos|cosh|exp|\n  expm1|floor|fround|hypot|imul|log|log10|log1p|log2|max|min|pow|random|\n  round|sign|sin|sinh|sqrt|tan|tanh|trunc)\n  |\n  (E|LN10|LN2|LOG10E|LOG2E|PI|SQRT1_2|SQRT2)))?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "support.constant.math.js.jsx"
            },
            "2": {
              "name": "punctuation.accessor.js.jsx"
            },
            "3": {
              "name": "punctuation.accessor.optional.js.jsx"
            },
            "4": {
              "name": "support.function.math.js.jsx"
            },
            "5": {
              "name": "support.constant.property.math.js.jsx"
            }
          }
        },
        {
          "match": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(console)(?:\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\n  assert|clear|count|debug|dir|error|group|groupCollapsed|groupEnd|info|log\n  |profile|profileEnd|table|time|timeEnd|timeStamp|trace|warn))?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "support.class.console.js.jsx"
            },
            "2": {
              "name": "punctuation.accessor.js.jsx"
            },
            "3": {
              "name": "punctuation.accessor.optional.js.jsx"
            },
            "4": {
              "name": "support.function.console.js.jsx"
            }
          }
        },
        {
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(JSON)(?:\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(parse|stringify))?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "support.constant.json.js.jsx"
            },
            "2": {
              "name": "punctuation.accessor.js.jsx"
            },
            "3": {
              "name": "punctuation.accessor.optional.js.jsx"
            },
            "4": {
              "name": "support.function.json.js.jsx"
            }
          }
        },
        {
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(import)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(meta)\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "keyword.control.import.js.jsx"
            },
            "2": {
              "name": "punctuation.accessor.js.jsx"
            },
            "3": {
              "name": "punctuation.accessor.optional.js.jsx"
            },
            "4": {
              "name": "support.variable.property.importmeta.js.jsx"
            }
          }
        },
        {
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(new)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(target)\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "keyword.operator.new.js.jsx"
            },
            "2": {
              "name": "punctuation.accessor.js.jsx"
            },
            "3": {
              "name": "punctuation.accessor.optional.js.jsx"
            },
            "4": {
              "name": "support.variable.property.target.js.jsx"
            }
          }
        },
        {
          "match": "(?x) (?:(\\.)|(\\?\\.(?!\\s*[[:digit:]]))) \\s* (?:\n  (?:(constructor|length|prototype|__proto__)\\b(?!\\$|\\s*(<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\\())\n  |\n  (?:(EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY)\\b(?!\\$)))",
          "captures": {
            "1": {
              "name": "punctuation.accessor.js.jsx"
            },
            "2": {
              "name": "punctuation.accessor.optional.js.jsx"
            },
            "3": {
              "name": "support.variable.property.js.jsx"
            },
            "4": {
              "name": "support.constant.js.jsx"
            }
          }
        },
        {
          "name": "support.class.node.js.jsx",
          "match": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream\n  |Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\\b(?!\\$)"
        },
        {
          "match": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(process)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(?:\n  (arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions)\n  |\n  (abort|chdir|cwd|disconnect|exit|[sg]ete?[gu]id|send|[sg]etgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime)\n))?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "support.variable.object.process.js.jsx"
            },
            "2": {
              "name": "punctuation.accessor.js.jsx"
            },
            "3": {
              "name": "punctuation.accessor.optional.js.jsx"
            },
            "4": {
              "name": "support.variable.property.process.js.jsx"
            },
            "5": {
              "name": "support.function.process.js.jsx"
            }
          }
        },
        {
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(exports)|(module)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(exports|id|filename|loaded|parent|children))?)\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "support.type.object.module.js.jsx"
            },
            "2": {
              "name": "support.type.object.module.js.jsx"
            },
            "3": {
              "name": "punctuation.accessor.js.jsx"
            },
            "4": {
              "name": "punctuation.accessor.optional.js.jsx"
            },
            "5": {
              "name": "support.type.object.module.js.jsx"
            }
          }
        },
        {
          "name": "support.variable.object.node.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(global|GLOBAL|root|__dirname|__filename)\\b(?!\\$)"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "include": "#object-identifiers"
        },
        {
          "match": "(?x)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                                              # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n))",
          "captures": {
            "1": {
              "name": "punctuation.accessor.js.jsx"
            },
            "2": {
              "name": "punctuation.accessor.optional.js.jsx"
            },
            "3": {
              "name": "entity.name.function.js.jsx"
            }
          }
        },
        {
          "match": "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
          "captures": {
            "1": {
              "name": "punctuation.accessor.js.jsx"
            },
            "2": {
              "name": "punctuation.accessor.optional.js.jsx"
            },
            "3": {
              "name": "variable.other.constant.property.js.jsx"
            }
          }
        },
        {
          "match": "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "punctuation.accessor.js.jsx"
            },
            "2": {
              "name": "punctuation.accessor.optional.js.jsx"
            },
            "3": {
              "name": "variable.other.property.js.jsx"
            }
          }
        },
        {
          "name": "variable.other.constant.js.jsx",
          "match": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])"
        },
        {
          "name": "variable.other.readwrite.js.jsx",
          "match": "[_$[:alpha:]][_$[:alnum:]]*"
        }
      ]
    },
    "object-identifiers": {
      "patterns": [
        {
          "name": "support.class.js.jsx",
          "match": "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\\??\\.\\s*prototype\\b(?!\\$))"
        },
        {
          "match": "(?x)(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(?:\n  (\\#?[[:upper:]][_$[:digit:][:upper:]]*) |\n  (\\#?[_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "punctuation.accessor.js.jsx"
            },
            "2": {
              "name": "punctuation.accessor.optional.js.jsx"
            },
            "3": {
              "name": "variable.other.constant.object.property.js.jsx"
            },
            "4": {
              "name": "variable.other.object.property.js.jsx"
            }
          }
        },
        {
          "match": "(?x)(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "variable.other.constant.object.js.jsx"
            },
            "2": {
              "name": "variable.other.object.js.jsx"
            }
          }
        }
      ]
    },
    "type-annotation": {
      "patterns": [
        {
          "name": "meta.type.annotation.js.jsx",
          "begin": "(:)(?=\\s*\\S)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.type.annotation.js.jsx"
            }
          },
          "end": "(?<![:|&])((?=$|^|[,);\\}\\]]|//)|(?==[^>])|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        {
          "name": "meta.type.annotation.js.jsx",
          "begin": "(:)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.type.annotation.js.jsx"
            }
          },
          "end": "(?<![:|&])((?=[,);\\}\\]]|//)|(?==[^>])|(?=^\\s*$)|((?<=\\S)(?=\\s*$))|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      ]
    },
    "parameter-type-annotation": {
      "patterns": [
        {
          "name": "meta.type.annotation.js.jsx",
          "begin": "(:)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.type.annotation.js.jsx"
            }
          },
          "end": "(?=[,)])|(?==[^>])",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      ]
    },
    "return-type": {
      "patterns": [
        {
          "name": "meta.return.type.js.jsx",
          "begin": "(?<=\\))\\s*(:)(?=\\s*\\S)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.type.annotation.js.jsx"
            }
          },
          "end": "(?<![:|&])(?=$|^|[{};,]|//)",
          "patterns": [
            {
              "include": "#return-type-core"
            }
          ]
        },
        {
          "name": "meta.return.type.js.jsx",
          "begin": "(?<=\\))\\s*(:)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.type.annotation.js.jsx"
            }
          },
          "end": "(?<![:|&])((?=[{};,]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))",
          "patterns": [
            {
              "include": "#return-type-core"
            }
          ]
        }
      ]
    },
    "return-type-core": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "begin": "(?<=[:|&])(?=\\s*\\{)",
          "end": "(?<=\\})",
          "patterns": [
            {
              "include": "#type-object"
            }
          ]
        },
        {
          "include": "#type-predicate-operator"
        },
        {
          "include": "#type"
        }
      ]
    },
    "arrow-return-type": {
      "name": "meta.return.type.arrow.js.jsx",
      "begin": "(?<=\\))\\s*(:)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.type.annotation.js.jsx"
        }
      },
      "end": "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\\s+))",
      "patterns": [
        {
          "include": "#arrow-return-type-body"
        }
      ]
    },
    "possibly-arrow-return-type": {
      "begin": "(?<=\\)|^)\\s*(:)(?=\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*=>)",
      "beginCaptures": {
        "1": {
          "name": "meta.arrow.js.jsx meta.return.type.arrow.js.jsx keyword.operator.type.annotation.js.jsx"
        }
      },
      "end": "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\\s+))",
      "contentName": "meta.arrow.js.jsx meta.return.type.arrow.js.jsx",
      "patterns": [
        {
          "include": "#arrow-return-type-body"
        }
      ]
    },
    "arrow-return-type-body": {
      "patterns": [
        {
          "begin": "(?<=[:])(?=\\s*\\{)",
          "end": "(?<=\\})",
          "patterns": [
            {
              "include": "#type-object"
            }
          ]
        },
        {
          "include": "#type-predicate-operator"
        },
        {
          "include": "#type"
        }
      ]
    },
    "type-parameters": {
      "name": "meta.type.parameters.js.jsx",
      "begin": "(<)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.typeparameters.begin.js.jsx"
        }
      },
      "end": "(>)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.typeparameters.end.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "name": "storage.modifier.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(extends)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "include": "#type"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "name": "keyword.operator.assignment.js.jsx",
          "match": "(=)(?!>)"
        }
      ]
    },
    "type-arguments": {
      "name": "meta.type.parameters.js.jsx",
      "begin": "\\<",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.typeparameters.begin.js.jsx"
        }
      },
      "end": "\\>",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.typeparameters.end.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#type-arguments-body"
        }
      ]
    },
    "type-arguments-body": {
      "patterns": [
        {
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(_)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          "captures": {
            "0": {
              "name": "keyword.operator.type.js.jsx"
            }
          }
        },
        {
          "include": "#type"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "type": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#string"
        },
        {
          "include": "#numeric-literal"
        },
        {
          "include": "#type-primitive"
        },
        {
          "include": "#type-builtin-literals"
        },
        {
          "include": "#type-parameters"
        },
        {
          "include": "#type-tuple"
        },
        {
          "include": "#type-object"
        },
        {
          "include": "#type-conditional"
        },
        {
          "include": "#type-operators"
        },
        {
          "include": "#type-fn-type-parameters"
        },
        {
          "include": "#type-paren-or-function-parameters"
        },
        {
          "include": "#type-function-return-type"
        },
        {
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(readonly)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*",
          "captures": {
            "1": {
              "name": "storage.modifier.js.jsx"
            }
          }
        },
        {
          "include": "#type-name"
        }
      ]
    },
    "type-primitive": {
      "name": "support.type.primitive.js.jsx",
      "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(string|number|bigint|boolean|symbol|any|void|never|unknown)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
    },
    "type-builtin-literals": {
      "name": "support.type.builtin.js.jsx",
      "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(this|true|false|undefined|null|object)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
    },
    "type-tuple": {
      "name": "meta.type.tuple.js.jsx",
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.square.js.jsx"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "meta.brace.square.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#type"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "type-object": {
      "name": "meta.object.type.js.jsx",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.js.jsx"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#method-declaration"
        },
        {
          "include": "#indexer-declaration"
        },
        {
          "include": "#indexer-mapped-type-declaration"
        },
        {
          "include": "#field-declaration"
        },
        {
          "include": "#type-annotation"
        },
        {
          "begin": "\\.\\.\\.",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.spread.js.jsx"
            }
          },
          "end": "(?=\\}|;|,|$)|(?<=\\})",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#punctuation-semicolon"
        },
        {
          "include": "#type"
        }
      ]
    },
    "type-conditional": {
      "patterns": [
        {
          "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(extends)\\s+",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.js.jsx"
            }
          },
          "end": "(?<=:)",
          "patterns": [
            {
              "begin": "\\?",
              "beginCaptures": {
                "0": {
                  "name": "keyword.operator.ternary.js.jsx"
                }
              },
              "end": ":",
              "endCaptures": {
                "0": {
                  "name": "keyword.operator.ternary.js.jsx"
                }
              },
              "patterns": [
                {
                  "include": "#type"
                }
              ]
            },
            {
              "include": "#type"
            }
          ]
        }
      ]
    },
    "type-paren-or-function-parameters": {
      "name": "meta.type.paren.cover.js.jsx",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.round.js.jsx"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.js.jsx"
        }
      },
      "patterns": [
        {
          "match": "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=\\s*(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)) |\n(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))))",
          "captures": {
            "1": {
              "name": "storage.modifier.js.jsx"
            },
            "2": {
              "name": "keyword.operator.rest.js.jsx"
            },
            "3": {
              "name": "entity.name.function.js.jsx variable.language.this.js.jsx"
            },
            "4": {
              "name": "entity.name.function.js.jsx"
            },
            "5": {
              "name": "keyword.operator.optional.js.jsx"
            }
          }
        },
        {
          "match": "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=:)",
          "captures": {
            "1": {
              "name": "storage.modifier.js.jsx"
            },
            "2": {
              "name": "keyword.operator.rest.js.jsx"
            },
            "3": {
              "name": "variable.parameter.js.jsx variable.language.this.js.jsx"
            },
            "4": {
              "name": "variable.parameter.js.jsx"
            },
            "5": {
              "name": "keyword.operator.optional.js.jsx"
            }
          }
        },
        {
          "include": "#type-annotation"
        },
        {
          "name": "punctuation.separator.parameter.js.jsx",
          "match": ","
        },
        {
          "include": "#type"
        }
      ]
    },
    "type-fn-type-parameters": {
      "patterns": [
        {
          "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(new)\\b(?=\\s*\\<)",
          "beginCaptures": {
            "1": {
              "name": "meta.type.constructor.js.jsx keyword.control.new.js.jsx"
            }
          },
          "end": "(?<=>)",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#type-parameters"
            }
          ]
        },
        {
          "name": "meta.type.constructor.js.jsx",
          "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(new)\\b\\s*(?=\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.new.js.jsx"
            }
          },
          "end": "(?<=\\))",
          "patterns": [
            {
              "include": "#function-parameters"
            }
          ]
        },
        {
          "name": "meta.type.function.js.jsx",
          "begin": "(?x)(\n  (?=\n    [(]\\s*(\n      ([)]) |\n      (\\.\\.\\.) |\n      ([_$[:alnum:]]+\\s*(\n        ([:,?=])|\n        ([)]\\s*=>)\n      ))\n    )\n  )\n)",
          "end": "(?<=\\))",
          "patterns": [
            {
              "include": "#function-parameters"
            }
          ]
        }
      ]
    },
    "type-function-return-type": {
      "patterns": [
        {
          "name": "meta.type.function.return.js.jsx",
          "begin": "(=>)(?=\\s*\\S)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.function.arrow.js.jsx"
            }
          },
          "end": "(?<!=>)(?<![|&])(?=[,\\]\\)\\{\\}=;>:\\?]|//|$)",
          "patterns": [
            {
              "include": "#type-function-return-type-core"
            }
          ]
        },
        {
          "name": "meta.type.function.return.js.jsx",
          "begin": "=>",
          "beginCaptures": {
            "0": {
              "name": "storage.type.function.arrow.js.jsx"
            }
          },
          "end": "(?<!=>)(?<![|&])((?=[,\\]\\)\\{\\}=;:\\?>]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))",
          "patterns": [
            {
              "include": "#type-function-return-type-core"
            }
          ]
        }
      ]
    },
    "type-function-return-type-core": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "begin": "(?<==>)(?=\\s*\\{)",
          "end": "(?<=\\})",
          "patterns": [
            {
              "include": "#type-object"
            }
          ]
        },
        {
          "include": "#type-predicate-operator"
        },
        {
          "include": "#type"
        }
      ]
    },
    "type-operators": {
      "patterns": [
        {
          "include": "#typeof-operator"
        },
        {
          "begin": "([&|])(?=\\s*\\{)",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.type.js.jsx"
            }
          },
          "end": "(?<=\\})",
          "patterns": [
            {
              "include": "#type-object"
            }
          ]
        },
        {
          "begin": "[&|]",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.type.js.jsx"
            }
          },
          "end": "(?=\\S)"
        },
        {
          "name": "keyword.operator.expression.keyof.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))keyof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "keyword.operator.ternary.js.jsx",
          "match": "(\\?|\\:)"
        },
        {
          "name": "keyword.operator.expression.infer.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))infer(?=\\s+[_$[:alpha:]])"
        },
        {
          "name": "keyword.operator.expression.awaited.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))awaited(?=\\s+[_$[:alpha:]])"
        },
        {
          "name": "keyword.operator.expression.import.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))import(?=\\s*\\()"
        }
      ]
    },
    "type-predicate-operator": {
      "patterns": [
        {
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(asserts)\\s+)?(?!asserts)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s(is)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          "captures": {
            "1": {
              "name": "keyword.operator.type.asserts.js.jsx"
            },
            "2": {
              "name": "variable.parameter.js.jsx variable.language.this.js.jsx"
            },
            "3": {
              "name": "variable.parameter.js.jsx"
            },
            "4": {
              "name": "keyword.operator.expression.is.js.jsx"
            }
          }
        },
        {
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(asserts)\\s+(?!is)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          "captures": {
            "1": {
              "name": "keyword.operator.type.asserts.js.jsx"
            },
            "2": {
              "name": "variable.parameter.js.jsx variable.language.this.js.jsx"
            },
            "3": {
              "name": "variable.parameter.js.jsx"
            }
          }
        },
        {
          "name": "keyword.operator.type.asserts.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))asserts(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "keyword.operator.expression.is.js.jsx",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))is(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        }
      ]
    },
    "type-name": {
      "patterns": [
        {
          "begin": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(<)",
          "captures": {
            "1": {
              "name": "entity.name.type.module.js.jsx"
            },
            "2": {
              "name": "punctuation.accessor.js.jsx"
            },
            "3": {
              "name": "punctuation.accessor.optional.js.jsx"
            },
            "4": {
              "name": "meta.type.parameters.js.jsx punctuation.definition.typeparameters.begin.js.jsx"
            }
          },
          "end": "(>)",
          "endCaptures": {
            "1": {
              "name": "meta.type.parameters.js.jsx punctuation.definition.typeparameters.end.js.jsx"
            }
          },
          "contentName": "meta.type.parameters.js.jsx",
          "patterns": [
            {
              "include": "#type-arguments-body"
            }
          ]
        },
        {
          "begin": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(<)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.type.js.jsx"
            },
            "2": {
              "name": "meta.type.parameters.js.jsx punctuation.definition.typeparameters.begin.js.jsx"
            }
          },
          "end": "(>)",
          "endCaptures": {
            "1": {
              "name": "meta.type.parameters.js.jsx punctuation.definition.typeparameters.end.js.jsx"
            }
          },
          "contentName": "meta.type.parameters.js.jsx",
          "patterns": [
            {
              "include": "#type-arguments-body"
            }
          ]
        },
        {
          "match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))",
          "captures": {
            "1": {
              "name": "entity.name.type.module.js.jsx"
            },
            "2": {
              "name": "punctuation.accessor.js.jsx"
            },
            "3": {
              "name": "punctuation.accessor.optional.js.jsx"
            }
          }
        },
        {
          "name": "entity.name.type.js.jsx",
          "match": "[_$[:alpha:]][_$[:alnum:]]*"
        }
      ]
    },
    "punctuation-comma": {
      "name": "punctuation.separator.comma.js.jsx",
      "match": ","
    },
    "punctuation-semicolon": {
      "name": "punctuation.terminator.statement.js.jsx",
      "match": ";"
    },
    "punctuation-accessor": {
      "match": "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))",
      "captures": {
        "1": {
          "name": "punctuation.accessor.js.jsx"
        },
        "2": {
          "name": "punctuation.accessor.optional.js.jsx"
        }
      }
    },
    "string": {
      "patterns": [
        {
          "include": "#qstring-single"
        },
        {
          "include": "#qstring-double"
        },
        {
          "include": "#template"
        }
      ]
    },
    "qstring-double": {
      "name": "string.quoted.double.js.jsx",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.js.jsx"
        }
      },
      "end": "(\")|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.js.jsx"
        },
        "2": {
          "name": "invalid.illegal.newline.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#string-character-escape"
        }
      ]
    },
    "qstring-single": {
      "name": "string.quoted.single.js.jsx",
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.js.jsx"
        }
      },
      "end": "(\\')|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.js.jsx"
        },
        "2": {
          "name": "invalid.illegal.newline.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#string-character-escape"
        }
      ]
    },
    "string-character-escape": {
      "name": "constant.character.escape.js.jsx",
      "match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
    },
    "template": {
      "patterns": [
        {
          "name": "string.template.js.jsx",
          "begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)(<\\s*(((keyof|infer|awaited|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|awaited|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|awaited|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)",
          "end": "(?=`)",
          "patterns": [
            {
              "begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*))",
              "end": "(?=(<\\s*(((keyof|infer|awaited|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|awaited|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|awaited|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)",
              "patterns": [
                {
                  "include": "#support-function-call-identifiers"
                },
                {
                  "name": "entity.name.function.tagged-template.js.jsx",
                  "match": "([_$[:alpha:]][_$[:alnum:]]*)"
                }
              ]
            },
            {
              "include": "#type-arguments"
            }
          ]
        },
        {
          "name": "string.template.js.jsx",
          "begin": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(<\\s*(((keyof|infer|awaited|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|awaited|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|awaited|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)`)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.tagged-template.js.jsx"
            }
          },
          "end": "(?=`)",
          "patterns": [
            {
              "include": "#type-arguments"
            }
          ]
        },
        {
          "name": "string.template.js.jsx",
          "begin": "([_$[:alpha:]][_$[:alnum:]]*)?(`)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.tagged-template.js.jsx"
            },
            "2": {
              "name": "punctuation.definition.string.template.begin.js.jsx"
            }
          },
          "end": "`",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.template.end.js.jsx"
            }
          },
          "patterns": [
            {
              "include": "#template-substitution-element"
            },
            {
              "include": "#string-character-escape"
            }
          ]
        }
      ]
    },
    "template-substitution-element": {
      "name": "meta.template.expression.js.jsx",
      "begin": "\\$\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.template-expression.begin.js.jsx"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.template-expression.end.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ],
      "contentName": "meta.embedded.line.js.jsx"
    },
    "regex": {
      "patterns": [
        {
          "name": "string.regexp.js.jsx",
          "begin": "(?<!\\+\\+|--|})(?<=[=(:,\\[?+!]|^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case|=>|&&|\\|\\||\\*\\/)\\s*(\\/)(?![\\/*])(?=(?:[^\\/\\\\\\[\\()]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\]|\\(([^\\)\\\\]|\\\\.)+\\))+\\/([gimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.js.jsx"
            }
          },
          "end": "(/)([gimsuy]*)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.js.jsx"
            },
            "2": {
              "name": "keyword.other.js.jsx"
            }
          },
          "patterns": [
            {
              "include": "#regexp"
            }
          ]
        },
        {
          "name": "string.regexp.js.jsx",
          "begin": "((?<![_$[:alnum:])\\]]|\\+\\+|--|}|\\*\\/)|((?<=^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case))\\s*)\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\])+\\/([gimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.js.jsx"
            }
          },
          "end": "(/)([gimsuy]*)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.js.jsx"
            },
            "2": {
              "name": "keyword.other.js.jsx"
            }
          },
          "patterns": [
            {
              "include": "#regexp"
            }
          ]
        }
      ]
    },
    "regexp": {
      "patterns": [
        {
          "name": "keyword.control.anchor.regexp",
          "match": "\\\\[bB]|\\^|\\$"
        },
        {
          "match": "\\\\[1-9]\\d*|\\\\k<([a-zA-Z_$][\\w$]*)>",
          "captures": {
            "0": {
              "name": "keyword.other.back-reference.regexp"
            },
            "1": {
              "name": "variable.other.regexp"
            }
          }
        },
        {
          "name": "keyword.operator.quantifier.regexp",
          "match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
        },
        {
          "name": "keyword.operator.or.regexp",
          "match": "\\|"
        },
        {
          "name": "meta.group.assertion.regexp",
          "begin": "(\\()((\\?=)|(\\?!)|(\\?<=)|(\\?<!))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.group.regexp"
            },
            "2": {
              "name": "punctuation.definition.group.assertion.regexp"
            },
            "3": {
              "name": "meta.assertion.look-ahead.regexp"
            },
            "4": {
              "name": "meta.assertion.negative-look-ahead.regexp"
            },
            "5": {
              "name": "meta.assertion.look-behind.regexp"
            },
            "6": {
              "name": "meta.assertion.negative-look-behind.regexp"
            }
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.group.regexp"
            }
          },
          "patterns": [
            {
              "include": "#regexp"
            }
          ]
        },
        {
          "name": "meta.group.regexp",
          "begin": "\\((?:(\\?:)|(?:\\?<([a-zA-Z_$][\\w$]*)>))?",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.group.regexp"
            },
            "1": {
              "name": "punctuation.definition.group.no-capture.regexp"
            },
            "2": {
              "name": "variable.other.regexp"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.group.regexp"
            }
          },
          "patterns": [
            {
              "include": "#regexp"
            }
          ]
        },
        {
          "name": "constant.other.character-class.set.regexp",
          "begin": "(\\[)(\\^)?",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.character-class.regexp"
            },
            "2": {
              "name": "keyword.operator.negation.regexp"
            }
          },
          "end": "(\\])",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.character-class.regexp"
            }
          },
          "patterns": [
            {
              "name": "constant.other.character-class.range.regexp",
              "match": "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))",
              "captures": {
                "1": {
                  "name": "constant.character.numeric.regexp"
                },
                "2": {
                  "name": "constant.character.control.regexp"
                },
                "3": {
                  "name": "constant.character.escape.backslash.regexp"
                },
                "4": {
                  "name": "constant.character.numeric.regexp"
                },
                "5": {
                  "name": "constant.character.control.regexp"
                },
                "6": {
                  "name": "constant.character.escape.backslash.regexp"
                }
              }
            },
            {
              "include": "#regex-character-class"
            }
          ]
        },
        {
          "include": "#regex-character-class"
        }
      ]
    },
    "regex-character-class": {
      "patterns": [
        {
          "name": "constant.other.character-class.regexp",
          "match": "\\\\[wWsSdDtrnvf]|\\."
        },
        {
          "name": "constant.character.numeric.regexp",
          "match": "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})"
        },
        {
          "name": "constant.character.control.regexp",
          "match": "\\\\c[A-Z]"
        },
        {
          "name": "constant.character.escape.backslash.regexp",
          "match": "\\\\."
        }
      ]
    },
    "comment-jsx": {
      "patterns": [
        {
          "name": "comment.block.documentation.js.jsx",
          "begin": "/\\*\\*(?!/)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.js.jsx"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.js.jsx"
            }
          },
          "patterns": [
            {
              "include": "#docblock"
            }
          ]
        },
        {
          "name": "comment.block.js.jsx",
          "begin": "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.js.jsx"
            },
            "2": {
              "name": "storage.type.internaldeclaration.js.jsx"
            },
            "3": {
              "name": "punctuation.decorator.internaldeclaration.js.jsx"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.js.jsx"
            }
          }
        },
        {
          "begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.js.jsx"
            },
            "2": {
              "name": "comment.line.double-slash.js.jsx"
            },
            "3": {
              "name": "punctuation.definition.comment.js.jsx"
            },
            "4": {
              "name": "storage.type.internaldeclaration.js.jsx"
            },
            "5": {
              "name": "punctuation.decorator.internaldeclaration.js.jsx"
            }
          },
          "end": "(?=$)",
          "contentName": "comment.line.double-slash.js.jsx"
        }
      ]
    },
    "single-line-comment-consuming-line-ending": {
      "begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.whitespace.comment.leading.js.jsx"
        },
        "2": {
          "name": "comment.line.double-slash.js.jsx"
        },
        "3": {
          "name": "punctuation.definition.comment.js.jsx"
        },
        "4": {
          "name": "storage.type.internaldeclaration.js.jsx"
        },
        "5": {
          "name": "punctuation.decorator.internaldeclaration.js.jsx"
        }
      },
      "end": "(?=^)",
      "contentName": "comment.line.double-slash.js.jsx"
    },
    "directives": {
      "name": "comment.line.triple-slash.directive.js.jsx",
      "begin": "^(///)\\s*(?=<(reference|amd-dependency|amd-module)(\\s+(path|types|no-default-lib|lib|name)\\s*=\\s*((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)))+\\s*/>\\s*$)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.comment.js.jsx"
        }
      },
      "end": "(?=$)",
      "patterns": [
        {
          "name": "meta.tag.js.jsx",
          "begin": "(<)(reference|amd-dependency|amd-module)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.directive.js.jsx"
            },
            "2": {
              "name": "entity.name.tag.directive.js.jsx"
            }
          },
          "end": "/>",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.directive.js.jsx"
            }
          },
          "patterns": [
            {
              "name": "entity.other.attribute-name.directive.js.jsx",
              "match": "path|types|no-default-lib|lib|name"
            },
            {
              "name": "keyword.operator.assignment.js.jsx",
              "match": "="
            },
            {
              "include": "#string"
            }
          ]
        }
      ]
    },
    "docblock": {
      "patterns": [
        {
          "match": "(?x)\n((@)(?:access|api))\n\\s+\n(private|protected|public)\n\\b",
          "captures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            },
            "3": {
              "name": "constant.language.access-type.jsdoc"
            }
          }
        },
        {
          "match": "(?x)\n((@)author)\n\\s+\n(\n  [^@\\s<>*/]\n  (?:[^@<>*/]|\\*[^/])*\n)\n(?:\n  \\s*\n  (<)\n  ([^>\\s]+)\n  (>)\n)?",
          "captures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            },
            "3": {
              "name": "entity.name.type.instance.jsdoc"
            },
            "4": {
              "name": "punctuation.definition.bracket.angle.begin.jsdoc"
            },
            "5": {
              "name": "constant.other.email.link.underline.jsdoc"
            },
            "6": {
              "name": "punctuation.definition.bracket.angle.end.jsdoc"
            }
          }
        },
        {
          "match": "(?x)\n((@)borrows) \\s+\n((?:[^@\\s*/]|\\*[^/])+)    # <that namepath>\n\\s+ (as) \\s+              # as\n((?:[^@\\s*/]|\\*[^/])+)    # <this namepath>",
          "captures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            },
            "3": {
              "name": "entity.name.type.instance.jsdoc"
            },
            "4": {
              "name": "keyword.operator.control.jsdoc"
            },
            "5": {
              "name": "entity.name.type.instance.jsdoc"
            }
          }
        },
        {
          "name": "meta.example.jsdoc",
          "begin": "((@)example)\\s+",
          "end": "(?=@|\\*/)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            }
          },
          "patterns": [
            {
              "match": "^\\s\\*\\s+"
            },
            {
              "contentName": "constant.other.description.jsdoc",
              "begin": "\\G(<)caption(>)",
              "beginCaptures": {
                "0": {
                  "name": "entity.name.tag.inline.jsdoc"
                },
                "1": {
                  "name": "punctuation.definition.bracket.angle.begin.jsdoc"
                },
                "2": {
                  "name": "punctuation.definition.bracket.angle.end.jsdoc"
                }
              },
              "end": "(</)caption(>)|(?=\\*/)",
              "endCaptures": {
                "0": {
                  "name": "entity.name.tag.inline.jsdoc"
                },
                "1": {
                  "name": "punctuation.definition.bracket.angle.begin.jsdoc"
                },
                "2": {
                  "name": "punctuation.definition.bracket.angle.end.jsdoc"
                }
              }
            },
            {
              "match": "[^\\s@*](?:[^*]|\\*[^/])*",
              "captures": {
                "0": {
                  "name": "source.embedded.js.jsx"
                }
              }
            }
          ]
        },
        {
          "match": "(?x) ((@)kind) \\s+ (class|constant|event|external|file|function|member|mixin|module|namespace|typedef) \\b",
          "captures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            },
            "3": {
              "name": "constant.language.symbol-type.jsdoc"
            }
          }
        },
        {
          "match": "(?x)\n((@)see)\n\\s+\n(?:\n  # URL\n  (\n    (?=https?://)\n    (?:[^\\s*]|\\*[^/])+\n  )\n  |\n  # JSDoc namepath\n  (\n    (?!\n      # Avoid matching bare URIs (also acceptable as links)\n      https?://\n      |\n      # Avoid matching {@inline tags}; we match those below\n      (?:\\[[^\\[\\]]*\\])? # Possible description [preceding]{@tag}\n      {@(?:link|linkcode|linkplain|tutorial)\\b\n    )\n    # Matched namepath\n    (?:[^@\\s*/]|\\*[^/])+\n  )\n)",
          "captures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            },
            "3": {
              "name": "variable.other.link.underline.jsdoc"
            },
            "4": {
              "name": "entity.name.type.instance.jsdoc"
            }
          }
        },
        {
          "match": "(?x)\n((@)template)\n\\s+\n# One or more valid identifiers\n(\n  [A-Za-z_$]         # First character: non-numeric word character\n  [\\w$.\\[\\]]*        # Rest of identifier\n  (?:                # Possible list of additional identifiers\n    \\s* , \\s*\n    [A-Za-z_$]\n    [\\w$.\\[\\]]*\n  )*\n)",
          "captures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            },
            "3": {
              "name": "variable.other.jsdoc"
            }
          }
        },
        {
          "match": "(?x)\n(\n  (@)\n  (?:arg|argument|const|constant|member|namespace|param|var)\n)\n\\s+\n(\n  [A-Za-z_$]\n  [\\w$.\\[\\]]*\n)",
          "captures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            },
            "3": {
              "name": "variable.other.jsdoc"
            }
          }
        },
        {
          "begin": "((@)typedef)\\s+(?={)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            }
          },
          "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
          "patterns": [
            {
              "include": "#jsdoctype"
            },
            {
              "name": "entity.name.type.instance.jsdoc",
              "match": "(?:[^@\\s*/]|\\*[^/])+"
            }
          ]
        },
        {
          "begin": "((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\\s+(?={)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            }
          },
          "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
          "patterns": [
            {
              "include": "#jsdoctype"
            },
            {
              "name": "variable.other.jsdoc",
              "match": "([A-Za-z_$][\\w$.\\[\\]]*)"
            },
            {
              "name": "variable.other.jsdoc",
              "match": "(?x)\n(\\[)\\s*\n[\\w$]+\n(?:\n  (?:\\[\\])?                                        # Foo[ ].bar properties within an array\n  \\.                                                # Foo.Bar namespaced parameter\n  [\\w$]+\n)*\n(?:\n  \\s*\n  (=)                                                # [foo=bar] Default parameter value\n  \\s*\n  (\n    # The inner regexes are to stop the match early at */ and to not stop at escaped quotes\n    (?>\n      \"(?:(?:\\*(?!/))|(?:\\\\(?!\"))|[^*\\\\])*?\" |                      # [foo=\"bar\"] Double-quoted\n      '(?:(?:\\*(?!/))|(?:\\\\(?!'))|[^*\\\\])*?' |                      # [foo='bar'] Single-quoted\n      \\[ (?:(?:\\*(?!/))|[^*])*? \\] |                                # [foo=[1,2]] Array literal\n      (?:(?:\\*(?!/))|\\s(?!\\s*\\])|\\[.*?(?:\\]|(?=\\*/))|[^*\\s\\[\\]])*   # Everything else\n    )*\n  )\n)?\n\\s*(?:(\\])((?:[^*\\s]|\\*[^\\s/])+)?|(?=\\*/))",
              "captures": {
                "1": {
                  "name": "punctuation.definition.optional-value.begin.bracket.square.jsdoc"
                },
                "2": {
                  "name": "keyword.operator.assignment.jsdoc"
                },
                "3": {
                  "name": "source.embedded.js.jsx"
                },
                "4": {
                  "name": "punctuation.definition.optional-value.end.bracket.square.jsdoc"
                },
                "5": {
                  "name": "invalid.illegal.syntax.jsdoc"
                }
              }
            }
          ]
        },
        {
          "begin": "(?x)\n(\n  (@)\n  (?:define|enum|exception|export|extends|lends|implements|modifies\n  |namespace|private|protected|returns?|suppress|this|throws|type\n  |yields?)\n)\n\\s+(?={)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            }
          },
          "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
          "patterns": [
            {
              "include": "#jsdoctype"
            }
          ]
        },
        {
          "match": "(?x)\n(\n  (@)\n  (?:alias|augments|callback|constructs|emits|event|fires|exports?\n  |extends|external|function|func|host|lends|listens|interface|memberof!?\n  |method|module|mixes|mixin|name|requires|see|this|typedef|uses)\n)\n\\s+\n(\n  (?:\n    [^{}@\\s*] | \\*[^/]\n  )+\n)",
          "captures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            },
            "3": {
              "name": "entity.name.type.instance.jsdoc"
            }
          }
        },
        {
          "contentName": "variable.other.jsdoc",
          "begin": "((@)(?:default(?:value)?|license|version))\\s+(([''\"]))",
          "beginCaptures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            },
            "3": {
              "name": "variable.other.jsdoc"
            },
            "4": {
              "name": "punctuation.definition.string.begin.jsdoc"
            }
          },
          "end": "(\\3)|(?=$|\\*/)",
          "endCaptures": {
            "0": {
              "name": "variable.other.jsdoc"
            },
            "1": {
              "name": "punctuation.definition.string.end.jsdoc"
            }
          }
        },
        {
          "match": "((@)(?:default(?:value)?|license|tutorial|variation|version))\\s+([^\\s*]+)",
          "captures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            },
            "3": {
              "name": "variable.other.jsdoc"
            }
          }
        },
        {
          "name": "storage.type.class.jsdoc",
          "match": "(?x) (@) (?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles |callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright |default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception |exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func |function|generator|global|hideconstructor|host|ignore|implements|implicitCast|inherit[Dd]oc |inner|instance|interface|internal|kind|lends|license|listens|main|member|memberof!?|method |mixes|mixins?|modifies|module|name|namespace|noalias|nocollapse|nocompile|nosideeffects |override|overview|package|param|polymer(?:Behavior)?|preserve|private|prop|property|protected |public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary |suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation |version|virtual|writeOnce|yields?) \\b",
          "captures": {
            "1": {
              "name": "punctuation.definition.block.tag.jsdoc"
            }
          }
        },
        {
          "include": "#inline-tags"
        },
        {
          "match": "((@)(?:[_$[:alpha:]][_$[:alnum:]]*))(?=\\s+)",
          "captures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            }
          }
        }
      ]
    },
    "brackets": {
      "patterns": [
        {
          "begin": "{",
          "end": "}|(?=\\*/)",
          "patterns": [
            {
              "include": "#brackets"
            }
          ]
        },
        {
          "begin": "\\[",
          "end": "\\]|(?=\\*/)",
          "patterns": [
            {
              "include": "#brackets"
            }
          ]
        }
      ]
    },
    "inline-tags": {
      "patterns": [
        {
          "name": "constant.other.description.jsdoc",
          "match": "(\\[)[^\\]]+(\\])(?={@(?:link|linkcode|linkplain|tutorial))",
          "captures": {
            "1": {
              "name": "punctuation.definition.bracket.square.begin.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.bracket.square.end.jsdoc"
            }
          }
        },
        {
          "name": "entity.name.type.instance.jsdoc",
          "begin": "({)((@)(?:link(?:code|plain)?|tutorial))\\s*",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.bracket.curly.begin.jsdoc"
            },
            "2": {
              "name": "storage.type.class.jsdoc"
            },
            "3": {
              "name": "punctuation.definition.inline.tag.jsdoc"
            }
          },
          "end": "}|(?=\\*/)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.bracket.curly.end.jsdoc"
            }
          },
          "patterns": [
            {
              "match": "\\G((?=https?://)(?:[^|}\\s*]|\\*[/])+)(\\|)?",
              "captures": {
                "1": {
                  "name": "variable.other.link.underline.jsdoc"
                },
                "2": {
                  "name": "punctuation.separator.pipe.jsdoc"
                }
              }
            },
            {
              "match": "\\G((?:[^{}@\\s|*]|\\*[^/])+)(\\|)?",
              "captures": {
                "1": {
                  "name": "variable.other.description.jsdoc"
                },
                "2": {
                  "name": "punctuation.separator.pipe.jsdoc"
                }
              }
            }
          ]
        }
      ]
    },
    "jsdoctype": {
      "patterns": [
        {
          "contentName": "entity.name.type.instance.jsdoc",
          "begin": "\\G({)",
          "beginCaptures": {
            "0": {
              "name": "entity.name.type.instance.jsdoc"
            },
            "1": {
              "name": "punctuation.definition.bracket.curly.begin.jsdoc"
            }
          },
          "end": "((}))\\s*|(?=\\*/)",
          "endCaptures": {
            "1": {
              "name": "entity.name.type.instance.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.bracket.curly.end.jsdoc"
            }
          },
          "patterns": [
            {
              "include": "#brackets"
            }
          ]
        }
      ]
    },
    "jsx": {
      "patterns": [
        {
          "include": "#jsx-tag-without-attributes-in-expression"
        },
        {
          "include": "#jsx-tag-in-expression"
        }
      ]
    },
    "jsx-tag-without-attributes-in-expression": {
      "begin": "(?<!\\+\\+|--)(?<=[({\\[,?=>:*]|&&|\\|\\||\\?|\\*\\/|^await|[^\\._$[:alnum:]]await|^return|[^\\._$[:alnum:]]return|^default|[^\\._$[:alnum:]]default|^yield|[^\\._$[:alnum:]]yield|^)\\s*(?=(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>))",
      "end": "(?!(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>))",
      "patterns": [
        {
          "include": "#jsx-tag-without-attributes"
        }
      ]
    },
    "jsx-tag-without-attributes": {
      "name": "meta.tag.without-attributes.js.jsx",
      "begin": "(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>)",
      "end": "(</)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.js.jsx"
        },
        "2": {
          "name": "entity.name.tag.namespace.js.jsx"
        },
        "3": {
          "name": "punctuation.separator.namespace.js.jsx"
        },
        "4": {
          "name": "entity.name.tag.js.jsx"
        },
        "5": {
          "name": "support.class.component.js.jsx"
        },
        "6": {
          "name": "punctuation.definition.tag.end.js.jsx"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.js.jsx"
        },
        "2": {
          "name": "entity.name.tag.namespace.js.jsx"
        },
        "3": {
          "name": "punctuation.separator.namespace.js.jsx"
        },
        "4": {
          "name": "entity.name.tag.js.jsx"
        },
        "5": {
          "name": "support.class.component.js.jsx"
        },
        "6": {
          "name": "punctuation.definition.tag.end.js.jsx"
        }
      },
      "contentName": "meta.jsx.children.js.jsx",
      "patterns": [
        {
          "include": "#jsx-children"
        }
      ]
    },
    "jsx-tag-in-expression": {
      "begin": "(?x)\n  (?<!\\+\\+|--)(?<=[({\\[,?=>:*]|&&|\\|\\||\\?|\\*\\/|^await|[^\\._$[:alnum:]]await|^return|[^\\._$[:alnum:]]return|^default|[^\\._$[:alnum:]]default|^yield|[^\\._$[:alnum:]]yield|^)\\s*\n  (?!<\\s*[_$[:alpha:]][_$[:alnum:]]*((\\s+extends\\s+[^=>])|,)) # look ahead is not type parameter of arrow\n  (?=(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>))",
      "end": "(?!(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>))",
      "patterns": [
        {
          "include": "#jsx-tag"
        }
      ]
    },
    "jsx-tag": {
      "name": "meta.tag.js.jsx",
      "begin": "(?=(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>))",
      "end": "(/>)|(?:(</)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>))",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.end.js.jsx"
        },
        "2": {
          "name": "punctuation.definition.tag.begin.js.jsx"
        },
        "3": {
          "name": "entity.name.tag.namespace.js.jsx"
        },
        "4": {
          "name": "punctuation.separator.namespace.js.jsx"
        },
        "5": {
          "name": "entity.name.tag.js.jsx"
        },
        "6": {
          "name": "support.class.component.js.jsx"
        },
        "7": {
          "name": "punctuation.definition.tag.end.js.jsx"
        }
      },
      "patterns": [
        {
          "begin": "(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.js.jsx"
            },
            "2": {
              "name": "entity.name.tag.namespace.js.jsx"
            },
            "3": {
              "name": "punctuation.separator.namespace.js.jsx"
            },
            "4": {
              "name": "entity.name.tag.js.jsx"
            },
            "5": {
              "name": "support.class.component.js.jsx"
            }
          },
          "end": "(?=[/]?>)",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#type-arguments"
            },
            {
              "include": "#jsx-tag-attributes"
            }
          ]
        },
        {
          "begin": "(>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.js.jsx"
            }
          },
          "end": "(?=</)",
          "contentName": "meta.jsx.children.js.jsx",
          "patterns": [
            {
              "include": "#jsx-children"
            }
          ]
        }
      ]
    },
    "jsx-children": {
      "patterns": [
        {
          "include": "#jsx-tag-without-attributes"
        },
        {
          "include": "#jsx-tag"
        },
        {
          "include": "#jsx-evaluated-code"
        },
        {
          "include": "#jsx-entities"
        }
      ]
    },
    "jsx-evaluated-code": {
      "contentName": "meta.embedded.expression.js.jsx",
      "begin": "\\{",
      "end": "\\}",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.embedded.begin.js.jsx"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.embedded.end.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "jsx-entities": {
      "patterns": [
        {
          "name": "constant.character.entity.js.jsx",
          "match": "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)",
          "captures": {
            "1": {
              "name": "punctuation.definition.entity.js.jsx"
            },
            "3": {
              "name": "punctuation.definition.entity.js.jsx"
            }
          }
        },
        {
          "name": "invalid.illegal.bad-ampersand.js.jsx",
          "match": "&"
        }
      ]
    },
    "jsx-tag-attributes": {
      "name": "meta.tag.attributes.js.jsx",
      "begin": "\\s+",
      "end": "(?=[/]?>)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#jsx-tag-attribute-name"
        },
        {
          "include": "#jsx-tag-attribute-assignment"
        },
        {
          "include": "#jsx-string-double-quoted"
        },
        {
          "include": "#jsx-string-single-quoted"
        },
        {
          "include": "#jsx-evaluated-code"
        },
        {
          "include": "#jsx-tag-attributes-illegal"
        }
      ]
    },
    "jsx-tag-attribute-name": {
      "match": "(?x)\n  \\s*\n  (?:([_$[:alpha:]][-_$[:alnum:].]*)(:))?\n  ([_$[:alpha:]][-_$[:alnum:]]*)\n  (?=\\s|=|/?>|/\\*|//)",
      "captures": {
        "1": {
          "name": "entity.other.attribute-name.namespace.js.jsx"
        },
        "2": {
          "name": "punctuation.separator.namespace.js.jsx"
        },
        "3": {
          "name": "entity.other.attribute-name.js.jsx"
        }
      }
    },
    "jsx-tag-attribute-assignment": {
      "name": "keyword.operator.assignment.js.jsx",
      "match": "=(?=\\s*(?:'|\"|{|/\\*|//|\\n))"
    },
    "jsx-string-double-quoted": {
      "name": "string.quoted.double.js.jsx",
      "begin": "\"",
      "end": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.js.jsx"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#jsx-entities"
        }
      ]
    },
    "jsx-string-single-quoted": {
      "name": "string.quoted.single.js.jsx",
      "begin": "'",
      "end": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.js.jsx"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.js.jsx"
        }
      },
      "patterns": [
        {
          "include": "#jsx-entities"
        }
      ]
    },
    "jsx-tag-attributes-illegal": {
      "name": "invalid.illegal.attribute.js.jsx",
      "match": "\\S+"
    },
		"keywords": {
			"patterns": [{
				"name": "keyword.control.rml",
				"match": "\\b(if|while|for|return)\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.rml",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.rml",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.rml"
}